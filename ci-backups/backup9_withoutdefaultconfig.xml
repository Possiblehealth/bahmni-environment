<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="82">
  <server artifactsdir="artifacts" siteUrl="https://ci-bahmni.thoughtworks.com" secureSiteUrl="https://ci-bahmni.thoughtworks.com" commandRepositoryLocation="default" serverId="411c7502-b326-483b-87dc-a4d4fd30dc8b">
    <security>
      <passwordFile path="/var/lib/go-server/passwd-file" />
      <roles>
        <role name="guest">
          <users>
            <user>guest</user>
            <user>bharatak</user>
          </users>
        </role>
        <role name="deploy">
          <users>
            <user>tw</user>
            <user>apaul</user>
            <user>sudhamshk</user>
            <user>sadiaghazal16</user>
          </users>
        </role>
      </roles>
      <admins>
        <user>ci-admin</user>
        <user>d3</user>
        <user>aj-jaswanth</user>
        <user>binduak</user>
        <user>shashikanthgadgay</user>
        <user>rahul080327</user>
        <user>bharatak</user>
        <user>lipikadugar</user>
        <user>HemanthGowda</user>
        <user>chethandeshpande</user>
        <user>maheshongithub</user>
        <user>sravanthi17</user>
        <user>hanisha93</user>
        <user>ShruthiPitta</user>
        <user>sumanmaity112</user>
        <user>bitweft</user>
        <user>vinayvenu</user>
        <user>kumarvastav</user>
        <user>padmavati</user>
        <user>preethi29</user>
        <user>santhubairamcs</user>
        <user>sushmav</user>
        <user>pankajladhar</user>
        <user>swarupkm</user>
        <user>senthilr85</user>
        <user>vikashgupta2000</user>
        <user>vinkesh</user>
        <user>GautamSidtharth</user>
        <user>Prasannasaraf</user>
        <user>sourava</user>
        <user>Gaurav-Deshkar</user>
        <user>PrithviThakor</user>
        <user>koushik-shetty</user>
        <user>sadiaghazal16</user>
        <user>shireeshaBongarala</user>
        <user>Bijayini</user>
        <user>SwathiVarkala</user>
        <user>priyankasahaisaxena</user>
        <user>jaya21</user>
        <user>hajaar</user>
        <user>rameshbaskar</user>
        <user>angshu</user>
        <user>alagesann</user>
      </admins>
    </security>
  </server>
  <repositories>
    <repository id="ccd74e60-8689-4f31-8265-50849640527d" name="MavenNexus">
      <pluginConfiguration id="maven" version="1" />
      <configuration>
        <property>
          <key>REPO_URL</key>
          <value>http://mavenrepo.openmrs.org/nexus/content/repositories/public</value>
        </property>
      </configuration>
      <packages>
        <package id="4eb2d35a-1137-4167-9e19-a3aecf901db7" name="openmrs-webapp">
          <configuration>
            <property>
              <key>GROUP_ID</key>
              <value>org.openmrs.web</value>
            </property>
            <property>
              <key>ARTIFACT_ID</key>
              <value>openmrs-webapp</value>
            </property>
            <property>
              <key>PACKAGING</key>
              <value>war</value>
            </property>
            <property>
              <key>POLL_VERSION_FROM</key>
              <value>1.12.0</value>
            </property>
            <property>
              <key>POLL_VERSION_TO</key>
              <value>2.0.0-SNAPSHOT</value>
            </property>
          </configuration>
        </package>
      </packages>
    </repository>
    <repository id="2c63533f-d09d-41b0-9a16-496aef7af7d4" name="bahmniyum">
      <pluginConfiguration id="yum" version="1" />
      <configuration>
        <property>
          <key>REPO_URL</key>
          <value>http://172.18.2.14/rpm/bahmni</value>
        </property>
      </configuration>
      <packages>
        <package id="f47cf922-03db-40d2-a0e5-9e67fa962b8b" name="bahmni-installer">
          <configuration>
            <property>
              <key>PACKAGE_SPEC</key>
              <value>bahmni-installer-0.82</value>
            </property>
          </configuration>
        </package>
      </packages>
    </repository>
    <repository id="a1a6a0b4-9d75-40a7-af22-fa0eb5548454" name="BahmniRPM">
      <pluginConfiguration id="yum" version="1" />
      <configuration>
        <property>
          <key>REPO_URL</key>
          <value>http://dl.bintray.com/bahmni/rpm/</value>
        </property>
      </configuration>
    </repository>
  </repositories>
  <pipelines group="two-factor-authentication">
    <authorization>
      <view>
        <user>guest</user>
        <role>guest</role>
      </view>
    </authorization>
    <pipeline name="two-factor-auth">
      <materials>
        <git url="https://github.com/Bahmni/two-factor-auth/" dest="two-factor-auth" />
      </materials>
      <stage name="build" cleanWorkingDir="true">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="./gradlew" workingdir="two-factor-auth">
                <arg>--refresh-dependencies</arg>
                <arg>clean</arg>
                <arg>sms-interface:publish</arg>
                <arg>webapp:build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
            <artifacts>
              <artifact src="two-factor-auth/webapp/build/libs/*.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="package" cleanWorkingDir="true">
        <jobs>
          <job name="package-rpm">
            <tasks>
              <fetchartifact pipeline="two-factor-auth" stage="build" job="build" srcfile="two-factor-auth-0.0.1-SNAPSHOT.jar" dest="two-factor-auth/package/resources/">
                <runif status="passed" />
              </fetchartifact>
              <exec command="wget" workingdir="two-factor-auth/package/resources/">
                <arg>http://172.18.2.14/jar/externalauth-1.0-SNAPSHOT.jar</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv" workingdir="two-factor-auth/package/resources/">
                <arg>externalauth-1.0-SNAPSHOT.jar</arg>
                <arg>externalauth.jar</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv" workingdir="two-factor-auth/package/resources/">
                <arg>two-factor-auth-0.0.1-SNAPSHOT.jar</arg>
                <arg>bahmni-two-factor-auth.jar</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp" workingdir="two-factor-auth">
                <arg>-r</arg>
                <arg>webapp/src/main/migrations</arg>
                <arg>package/resources</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp" workingdir="two-factor-auth">
                <arg>webapp/src/main/resources/application.properties</arg>
                <arg>package/resources/</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew" workingdir="two-factor-auth">
                <arg>clean</arg>
                <arg>package:buildRpm</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="two-factor-auth/package/build/distributions/bahmni-two-factor-auth-*.rpm" dest="two-factor-auth-package" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="publish" cleanWorkingDir="true">
        <jobs>
          <job name="publish-artifacts-to-yum-repo">
            <tasks>
              <fetchartifact pipeline="two-factor-auth" stage="package" job="package-rpm" srcdir="two-factor-auth-package" dest="artifacts">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="artifacts">
                <arg>-c</arg>
                <arg>yes | sudo cp -f two-factor-auth-package/bahmni-two-factor-auth-*.rpm /var/www/rpm/bahmni/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo createrepo --update /var/www/rpm/bahmni/</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yum-repo</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="bahmni-sms-plugins">
      <materials>
        <git url="https://github.com/Bahmni/bahmni-sms-plugins" dest="bahmni-sms-plugins" />
      </materials>
      <stage name="build_and_publish">
        <jobs>
          <job name="build_and_publish">
            <tasks>
              <exec command="./gradlew" workingdir="bahmni-sms-plugins">
                <arg>--refresh-dependencies</arg>
                <arg>clean</arg>
                <arg>publish</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="external-auth">
      <materials>
        <git url="https://github.com/Bahmni/external-auth.git" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="mvn">
                <arg>clean</arg>
                <arg>install</arg>
                <arg>-U</arg>
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
            <artifacts>
              <artifact src="omod/target/externalauth-1.0-SNAPSHOT.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="publish">
        <jobs>
          <job name="publish-artifacts-to-yum-repo">
            <tasks>
              <fetchartifact pipeline="external-auth" stage="build" job="build" srcfile="externalauth-1.0-SNAPSHOT.jar">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>yes | sudo cp -f externalauth-1.0-SNAPSHOT.jar /var/www/jar/</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yum-repo</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Bahmni_Pipeline_Group_Release_0_84">
    <authorization>
      <view>
        <user>guest</user>
        <role>guest</role>
      </view>
    </authorization>
    <pipeline name="OpenERP_v0_84" isLocked="false" template="OpenERP">
      <params>
        <param name="branch">master</param>
        <param name="pipeline_name">v0_84</param>
        <param name="rpm_version">0.84</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <environmentvariables>
        <variable name="OPENERP_LOCATION">
          <value>/usr/lib/python2.6/site-packages/openerp-7.0_20130301_002301-py2.6.egg</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/openerp-modules.git" branch="#{branch}" dest="openerp-modules" />
        <git url="https://github.com/Bahmni/openerp-functional-tests.git" branch="#{branch}" dest="openerp-functional-tests" />
        <git url="https://github.com/Bahmni/openerp-atomfeed-service.git" branch="#{branch}" dest="openerp-atomfeed-service" materialName="openerp-atomfeed-service" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" invertFilter="true" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="bahmni-erp/**/*" />
            <ignore pattern="bahmni-erp-connect/**/*" />
          </filter>
        </git>
        <git url="https://github.com/Bahmni/emr-functional-tests" shallowClone="true" dest="emr-functional-tests" materialName="emrft" />
      </materials>
    </pipeline>
    <pipeline name="OpenElis_v0_84" isLocked="false" template="OpenElis">
      <params>
        <param name="branch">master</param>
        <param name="pipeline_name">v0_84</param>
        <param name="rpm_version">0.84</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <environmentvariables>
        <variable name="OPENELIS_CONTEXT">
          <value>Bahmni</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/OpenElis.git" branch="#{branch}" dest="OpenElis" materialName="OpenElis_github" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" invertFilter="true" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="bahmni-lab/**/*" />
            <ignore pattern="bahmni-lab-connect/**/*" />
          </filter>
        </git>
        <git url="https://github.com/Bahmni/emr-functional-tests.git" branch="#{branch}" shallowClone="true" dest="emr-functional-tests" materialName="EMRFT" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_MRS_v0_84" isLocked="false" template="Bahmni_MRS_Ansible">
      <params>
        <param name="branch">master</param>
        <param name="bahmni_version">0.84-SNAPSHOT</param>
        <param name="pipeline_name">v0_84</param>
        <param name="rpm_version">0.84</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <environmentvariables>
        <variable name="MAVEN_OPTS">
          <value>-Xmx1024m -XX:MaxPermSize=128m</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-Core.git" branch="#{branch}" dest="bahmnicore" materialName="Bahmni_Core" />
        <git url="https://github.com/Bahmni/openmrs-module-bahmniappS.git" branch="#{branch}" dest="openmrs-module-bahmniapps" materialName="openmrs-module-bahmniapps" />
        <git url="https://github.com/Bahmni/openmrs-distro-bahmni.git" branch="#{branch}" dest="openmrs-distro-bahmni" />
        <pipeline pipelineName="ICT4H" stageName="BuildStage" />
        <git url="https://github.com/Bahmni/emr-functional-tests" branch="#{branch}" shallowClone="true" dest="emr-functional-tests" />
        <git url="https://github.com/Bahmni/default-config.git" branch="#{branch}" dest="default-config" />
        <pipeline pipelineName="ClientSideLogging" stageName="defaultStage" materialName="client_side_logging" />
        <pipeline pipelineName="Bahmni_Java_Utils" stageName="buildStage" materialName="Bahmni_Java_Utils" />
        <pipeline pipelineName="openmrs-module-bedmanagement" stageName="buildStage" materialName="Bed_Management_Pipeline" />
        <pipeline pipelineName="Build_bacteriology" stageName="defaultStage" materialName="Build_bacteriology" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" invertFilter="true" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="openmrs/**/*" />
            <ignore pattern="bahmni-emr/**/*" />
            <ignore pattern="bahmni-web/**/*" />
          </filter>
        </git>
        <pipeline pipelineName="OpenMRS_v0_84" stageName="buildRPM" materialName="openmrs" />
      </materials>
    </pipeline>
    <pipeline name="ClientSideLogging">
      <materials>
        <git url="https://github.com/Bahmni/client_side_logging" dest="client_side_logging_source" />
      </materials>
      <stage name="defaultStage" artifactCleanupProhibited="true">
        <jobs>
          <job name="Nothing">
            <artifacts>
              <artifact src="client_side_logging_source/client_side_logging.py" dest="client_side_logging" />
              <artifact src="client_side_logging_source/client_side_logging.wsgi" dest="client_side_logging" />
              <artifact src="client_side_logging_source/__init__.py" dest="client_side_logging" />
              <artifact src="client_side_logging_source/logging.yml" dest="client_side_logging" />
              <artifact src="client_side_logging_source/RotatingLogger.py" dest="client_side_logging" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Bahmni_environment_v0_84" template="Bahmni_environment">
      <params>
        <param name="branch">master</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-environment" branch="#{branch}" dest="bahmni-environment" materialName="bahmni-environment" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_artifacts_v0_84" isLocked="false" template="Bahmni_Artifacts_Ansible">
      <params>
        <param name="branch">master</param>
        <param name="pipeline_name">v0_84</param>
        <param name="upstream_name">Bahmni_artifacts_v0_84</param>
        <param name="bahmni_version">0.84-SNAPSHOT</param>
        <param name="rpm_version">0.84</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <materials>
        <pipeline pipelineName="Bahmni_MRS_v0_84" stageName="Package" />
        <pipeline pipelineName="OpenERP_v0_84" stageName="package" />
        <pipeline pipelineName="OpenElis_v0_84" stageName="Package" />
        <pipeline pipelineName="Bahmni_Reports_v0_84" stageName="Package" />
        <pipeline pipelineName="Bahmni_pacs_v0_84" stageName="Package" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" invertFilter="true" dest="bahmni-package" materialName="bahmni-package">
          <filter>
            <ignore pattern="bahmni-installer/**/*" />
          </filter>
        </git>
        <git url="https://github.com/Bahmni/bahmni-playbooks.git" branch="#{branch}" dest="bahmni-playbooks" materialName="bahmni-playbooks" />
        <pipeline pipelineName="Bahmni_event_log_service_v0_84" stageName="Package" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_Java_Utils" template="java_utils">
      <params>
        <param name="branch">master</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-java-utils.git" branch="#{branch}" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_Reports_v0_84" template="Bahmni-Reports">
      <params>
        <param name="pipeline_name">v0_84</param>
        <param name="rpm_version">0.84</param>
        <param name="branch">master</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-reports" branch="#{branch}" dest="bahmni-reports" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" invertFilter="true" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="bahmni-reports/**/*" />
          </filter>
        </git>
      </materials>
    </pipeline>
    <pipeline name="Bahmni_pacs_v0_84" template="Bahmni_pacs">
      <params>
        <param name="pipeline_name">v0_84</param>
        <param name="branch">master</param>
        <param name="rpm_version">0.84</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <materials>
        <git url="https://github.com/Bahmni/PACS-Integration.git" branch="#{branch}" dest="pacs_integration" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" invertFilter="true" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="bahmni-pacs/**/*" />
          </filter>
        </git>
      </materials>
    </pipeline>
    <pipeline name="Bahmni_event_log_service_v0_84" template="event_log_service">
      <params>
        <param name="rpm_version">0.84</param>
        <param name="pipeline_name">v0_84</param>
        <param name="branch">master</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <materials>
        <git url="https://github.com/Bahmni/event-log-service.git" branch="#{branch}" dest="event-log-service" materialName="event_log_service" />
        <pipeline pipelineName="Bahmni_environment_v0_84" stageName="buildStage" materialName="Bahmni_environment_v0_84" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" invertFilter="true" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="bahmni-event-log-service/**/*" />
          </filter>
        </git>
      </materials>
    </pipeline>
    <pipeline name="Release_To_Public_v0_84" template="Release_To_Public">
      <params>
        <param name="bahmni_version">0.84</param>
        <param name="pipeline_name">v0_84</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_v0_84" stageName="PackageInstaller" materialName="Artifacts" />
        <git url="https://github.com/Bahmni/utilities.git" dest="utilities" autoUpdate="false" materialName="Utilities" />
        <git url="https://github.com/Bahmni/bahmni-vagrant.git" dest="bahmni-vagrant" autoUpdate="false" materialName="bahmni-vagrant" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_Offline_v0_84" template="Bahmni_Offline">
      <params>
        <param name="pipeline_name">v0_84</param>
        <param name="branch">master</param>
        <param name="rpm_version">0.84</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <environmentvariables>
        <variable name="ADB_INSTALL_TIMEOUT">
          <value>8</value>
        </variable>
        <variable name="RELEASE">
          <value>0.84</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-offline.git" branch="#{branch}" dest="bahmni-offline" materialName="Offline_Sources" />
        <pipeline pipelineName="Bahmni_MRS_v0_84" stageName="BuildStage" materialName="Bahmni_MRS_v0_84" />
        <git url="https://github.com/Bahmni/emr-functional-tests.git" dest="emr-functional-tests" />
        <git url="https://github.com/Bahmni/default-config.git" branch="#{branch}" dest="default-config" materialName="default_config" />
      </materials>
    </pipeline>
    <pipeline name="OpenMRS_v0_84" template="OpenMRS">
      <params>
        <param name="rpm_version">0.84</param>
        <param name="branch_version">master</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/emr-functional-tests" branch="#{branch_version}" shallowClone="true" dest="emr-functional-tests" materialName="emrft" />
        <git url="https://github.com/Bahmni/bahmni-package" branch="#{branch_version}" dest="bahmni-package" materialName="bahmni_package" />
        <package ref="4eb2d35a-1137-4167-9e19-a3aecf901db7" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Bahmni_Pipeline_Group_Release_0_83">
    <authorization>
      <view>
        <user>guest</user>
        <role>guest</role>
      </view>
    </authorization>
    <pipeline name="OpenERP_v0_83" isLocked="false" template="OpenERP">
      <params>
        <param name="branch">release-0.83</param>
        <param name="pipeline_name">v0_83</param>
        <param name="rpm_version">0.83</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <environmentvariables>
        <variable name="OPENERP_LOCATION">
          <value>/usr/lib/python2.6/site-packages/openerp-7.0_20130301_002301-py2.6.egg</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/openerp-modules.git" branch="#{branch}" dest="openerp-modules" />
        <git url="https://github.com/Bahmni/openerp-functional-tests.git" branch="#{branch}" dest="openerp-functional-tests" />
        <git url="https://github.com/Bahmni/openerp-atomfeed-service.git" branch="#{branch}" dest="openerp-atomfeed-service" materialName="openerp-atomfeed-service" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <git url="https://github.com/Bahmni/emr-functional-tests" shallowClone="true" dest="emr-functional-tests" materialName="emrft" />
      </materials>
    </pipeline>
    <pipeline name="OpenElis_v0_83" isLocked="false" template="OpenElis">
      <params>
        <param name="branch">release-0.83</param>
        <param name="pipeline_name">v0_83</param>
        <param name="rpm_version">0.83</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <environmentvariables>
        <variable name="OPENELIS_CONTEXT">
          <value>Bahmni</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/OpenElis.git" branch="#{branch}" dest="OpenElis" materialName="OpenElis_github" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <git url="https://github.com/Bahmni/emr-functional-tests.git" branch="#{branch}" shallowClone="true" dest="emr-functional-tests" materialName="EMRFT" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_MRS_v0_83" isLocked="false" template="Bahmni_MRS_Ansible">
      <params>
        <param name="branch">release-0.83</param>
        <param name="bahmni_version">0.83-SNAPSHOT</param>
        <param name="pipeline_name">v0_83</param>
        <param name="rpm_version">0.83</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <environmentvariables>
        <variable name="MAVEN_OPTS">
          <value>-Xmx1024m -XX:MaxPermSize=128m</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-Core.git" branch="#{branch}" dest="bahmnicore" materialName="Bahmni_Core" />
        <git url="https://github.com/Bahmni/openmrs-module-bahmniappS.git" branch="#{branch}" dest="openmrs-module-bahmniapps" materialName="openmrs-module-bahmniapps" />
        <git url="https://github.com/Bahmni/openmrs-distro-bahmni.git" branch="#{branch}" dest="openmrs-distro-bahmni" />
        <pipeline pipelineName="ICT4H" stageName="BuildStage" />
        <git url="https://github.com/Bahmni/emr-functional-tests" branch="#{branch}" shallowClone="true" dest="emr-functional-tests" />
        <git url="https://github.com/Bahmni/default-config.git" branch="#{branch}" dest="default-config" />
        <pipeline pipelineName="ClientSideLogging" stageName="defaultStage" materialName="client_side_logging" />
        <pipeline pipelineName="Bahmni_environment_v0_83" stageName="buildStage" materialName="Bahmni_environment_v0_83" />
        <pipeline pipelineName="Bahmni_Java_Utils" stageName="buildStage" materialName="Bahmni_Java_Utils" />
        <pipeline pipelineName="openmrs-module-bedmanagement" stageName="buildStage" materialName="Bed_Management_Pipeline" />
        <pipeline pipelineName="Build_bacteriology" stageName="defaultStage" materialName="Build_bacteriology" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <pipeline pipelineName="OpenMRS_v0_83" stageName="buildRPM" materialName="openmrs" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_environment_v0_83" template="Bahmni_environment">
      <params>
        <param name="branch">release-0.83</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-environment" branch="#{branch}" dest="bahmni-environment" materialName="bahmni-environment" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_artifacts_v0_83" isLocked="false" template="Bahmni_Artifacts_Ansible">
      <params>
        <param name="branch">release-0.83</param>
        <param name="pipeline_name">v0_83</param>
        <param name="upstream_name">Bahmni_artifacts_v0_83</param>
        <param name="bahmni_version">0.83-SNAPSHOT</param>
        <param name="rpm_version">0.83</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <materials>
        <pipeline pipelineName="Bahmni_MRS_v0_83" stageName="Package" />
        <pipeline pipelineName="OpenERP_v0_83" stageName="package" />
        <pipeline pipelineName="OpenElis_v0_83" stageName="Package" />
        <pipeline pipelineName="Bahmni_environment_v0_83" stageName="buildStage" />
        <pipeline pipelineName="Bahmni_Reports_v0_83" stageName="Package" />
        <pipeline pipelineName="Bahmni_pacs_v0_83" stageName="Package" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" dest="bahmni-package" materialName="bahmni-package" />
        <git url="https://github.com/Bahmni/bahmni-playbooks.git" branch="#{branch}" dest="bahmni-playbooks" materialName="bahmni-playbooks" />
        <pipeline pipelineName="Bahmni_event_log_service_v0_83" stageName="Package" />
      </materials>
    </pipeline>
    <pipeline name="Build_default_config_v0_83" template="Implementation_config">
      <params>
        <param name="branch">release-0.83</param>
        <param name="implementation_name">default</param>
        <param name="pipeline_name">v0_83</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/default-config.git" branch="#{branch}" dest="default-config" />
        <pipeline pipelineName="Bahmni_environment_v0_83" stageName="buildStage" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_Reports_v0_83" template="Bahmni-Reports">
      <params>
        <param name="pipeline_name">v0_83</param>
        <param name="rpm_version">0.83</param>
        <param name="branch">release-0.83</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-reports" branch="#{branch}" dest="bahmni-reports" />
        <pipeline pipelineName="Bahmni_environment_v0_83" stageName="buildStage" materialName="Bahmni_environment_v0_83" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
      </materials>
    </pipeline>
    <pipeline name="Bahmni_pacs_v0_83" template="Bahmni_pacs">
      <params>
        <param name="pipeline_name">v0_83</param>
        <param name="branch">release-0.83</param>
        <param name="rpm_version">0.83</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <materials>
        <git url="https://github.com/Bahmni/PACS-Integration.git" branch="#{branch}" dest="pacs_integration" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <pipeline pipelineName="Bahmni_environment_v0_83" stageName="buildStage" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_event_log_service_v0_83" template="event_log_service">
      <params>
        <param name="rpm_version">0.83</param>
        <param name="pipeline_name">v0_83</param>
        <param name="branch">release-0.83</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <materials>
        <git url="https://github.com/Bahmni/event-log-service.git" branch="#{branch}" dest="event-log-service" materialName="event_log_service" />
        <pipeline pipelineName="Bahmni_environment_v0_83" stageName="buildStage" materialName="Bahmni_environment_v0_83" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
      </materials>
    </pipeline>
    <pipeline name="Release_To_Public_v0_83" template="Release_To_Public">
      <params>
        <param name="bahmni_version">0.83</param>
        <param name="pipeline_name">v0_83</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_v0_83" stageName="PackageInstaller" materialName="Artifacts" />
        <git url="https://github.com/Bahmni/utilities.git" dest="utilities" autoUpdate="false" materialName="Utilities" />
        <git url="https://github.com/Bahmni/bahmni-vagrant.git" dest="bahmni-vagrant" autoUpdate="false" materialName="bahmni-vagrant" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_Offline_v0_83" template="Bahmni_Offline">
      <params>
        <param name="pipeline_name">v0_83</param>
        <param name="branch">release-0.83</param>
        <param name="rpm_version">0.83</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <environmentvariables>
        <variable name="ADB_INSTALL_TIMEOUT">
          <value>8</value>
        </variable>
        <variable name="RELEASE">
          <value>0.83</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-offline.git" branch="#{branch}" dest="bahmni-offline" materialName="Offline_Sources" />
        <pipeline pipelineName="Bahmni_MRS_v0_83" stageName="BuildStage" materialName="Bahmni_MRS_v0_83" />
        <pipeline pipelineName="Build_default_config_v0_83" stageName="BuildStage" materialName="Build_default_config_v0_83" />
        <git url="https://github.com/Bahmni/emr-functional-tests.git" dest="emr-functional-tests" />
      </materials>
    </pipeline>
    <pipeline name="OpenMRS_v0_83" template="OpenMRS">
      <params>
        <param name="rpm_version">0.83</param>
        <param name="branch_version">release-0.83</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/emr-functional-tests" branch="#{branch_version}" shallowClone="true" dest="emr-functional-tests" materialName="emrft" />
        <git url="https://github.com/Bahmni/bahmni-package" branch="#{branch_version}" dest="bahmni-package" materialName="bahmni_package" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Bahmni_Pipeline_Group_Release_0_82">
    <authorization>
      <view>
        <user>guest</user>
        <role>guest</role>
      </view>
    </authorization>
    <pipeline name="OpenERP_v0_82" isLocked="false" template="OpenERP">
      <params>
        <param name="branch">release-0.82</param>
        <param name="pipeline_name">v0_82</param>
        <param name="rpm_version">0.82</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <environmentvariables>
        <variable name="OPENERP_LOCATION">
          <value>/usr/lib/python2.6/site-packages/openerp-7.0_20130301_002301-py2.6.egg</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/openerp-modules.git" branch="#{branch}" dest="openerp-modules" />
        <git url="https://github.com/Bahmni/openerp-functional-tests.git" branch="#{branch}" dest="openerp-functional-tests" />
        <git url="https://github.com/Bahmni/openerp-atomfeed-service.git" branch="#{branch}" dest="openerp-atomfeed-service" materialName="openerp-atomfeed-service" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <pipeline pipelineName="Bahmni_environment_v0_82" stageName="buildStage" materialName="Bahmni_Environment" />
        <git url="https://github.com/Bahmni/emr-functional-tests" branch="release-0.82" shallowClone="true" dest="emr-functional-tests" materialName="emrft" />
      </materials>
    </pipeline>
    <pipeline name="OpenElis_v0_82" isLocked="false" template="OpenElis">
      <params>
        <param name="branch">release-0.82</param>
        <param name="pipeline_name">v0_82</param>
        <param name="rpm_version">0.82</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <environmentvariables>
        <variable name="OPENELIS_CONTEXT">
          <value>Bahmni</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/OpenElis.git" branch="#{branch}" dest="OpenElis" materialName="OpenElis_github" />
        <pipeline pipelineName="Bahmni_environment_v0_82" stageName="buildStage" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <git url="https://github.com/Bahmni/emr-functional-tests" branch="#{branch}" dest="emr-functional-tests" materialName="EMRFT" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_MRS_v0_82" isLocked="false" template="Bahmni_MRS_Ansible">
      <params>
        <param name="branch">release-0.82</param>
        <param name="bahmni_version">0.82-SNAPSHOT</param>
        <param name="pipeline_name">v0_82</param>
        <param name="rpm_version">0.82</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <environmentvariables>
        <variable name="MAVEN_OPTS">
          <value>-Xmx1024m -XX:MaxPermSize=128m</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-Core.git" branch="#{branch}" dest="bahmnicore" materialName="Bahmni_Core" />
        <git url="https://github.com/Bahmni/openmrs-module-bahmniappS.git" branch="#{branch}" dest="openmrs-module-bahmniapps" materialName="openmrs-module-bahmniapps" />
        <git url="https://github.com/Bahmni/openmrs-distro-bahmni.git" branch="#{branch}" dest="openmrs-distro-bahmni" />
        <pipeline pipelineName="ICT4H" stageName="BuildStage" />
        <git url="https://github.com/Bahmni/emr-functional-tests" branch="#{branch}" shallowClone="true" dest="emr-functional-tests" />
        <git url="https://github.com/Bahmni/default-config.git" branch="#{branch}" dest="default-config" />
        <pipeline pipelineName="ClientSideLogging" stageName="defaultStage" materialName="client_side_logging" />
        <pipeline pipelineName="Bahmni_environment_v0_82" stageName="buildStage" materialName="Bahmni_environment_v0_82" />
        <pipeline pipelineName="openmrs-module-bedmanagement" stageName="buildStage" materialName="Bed_Management_Pipeline" />
        <pipeline pipelineName="Build_bacteriology" stageName="defaultStage" materialName="Build_bacteriology" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <pipeline pipelineName="OpenMRS_v0_82" stageName="buildRPM" materialName="openmrs" />
      </materials>
    </pipeline>
    <pipeline name="Build_jss_config_v0_82" template="Implementation_config">
      <params>
        <param name="branch">release-0.82</param>
        <param name="implementation_name">jss</param>
        <param name="pipeline_name">v0_82</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/jss-config.git" branch="#{branch}" dest="jss-config" />
        <pipeline pipelineName="Bahmni_environment_v0_82" stageName="buildStage" />
      </materials>
    </pipeline>
    <pipeline name="Build_possible_config_v0_82" template="Implementation_config">
      <params>
        <param name="branch">release-0.82</param>
        <param name="implementation_name">possible</param>
        <param name="pipeline_name">v0_82</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/possible-config.git" branch="#{branch}" dest="possible-config" />
        <pipeline pipelineName="Bahmni_environment_v0_82" stageName="buildStage" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_environment_v0_82" template="Bahmni_environment">
      <params>
        <param name="branch">release-0.82</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-environment" branch="#{branch}" dest="bahmni-environment" materialName="bahmni-environment" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_artifacts_v0_82" isLocked="false" template="Bahmni_Artifacts_Ansible">
      <params>
        <param name="branch">release-0.82</param>
        <param name="pipeline_name">v0_82</param>
        <param name="upstream_name">Bahmni_artifacts_v0_82</param>
        <param name="bahmni_version">0.82-SNAPSHOT</param>
        <param name="rpm_version">0.82</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <materials>
        <pipeline pipelineName="Bahmni_MRS_v0_82" stageName="Package" />
        <pipeline pipelineName="OpenERP_v0_82" stageName="package" />
        <pipeline pipelineName="OpenElis_v0_82" stageName="Package" />
        <pipeline pipelineName="Bahmni_environment_v0_82" stageName="buildStage" />
        <pipeline pipelineName="Bahmni_Reports_v0_82" stageName="Package" />
        <pipeline pipelineName="Bahmni_pacs_v0_82" stageName="Package" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" dest="bahmni-package" materialName="bahmni-package" />
        <git url="https://github.com/Bahmni/bahmni-playbooks.git" branch="#{branch}" dest="bahmni-playbooks" materialName="bahmni-playbooks">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <pipeline pipelineName="Bahmni_event_log_service_v0_82" stageName="Package" />
      </materials>
    </pipeline>
    <pipeline name="Build_default_config_v0_82" template="Implementation_config">
      <params>
        <param name="branch">release-0.82</param>
        <param name="implementation_name">default</param>
        <param name="pipeline_name">v0_82</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/default-config.git" branch="#{branch}" dest="default-config" />
        <pipeline pipelineName="Bahmni_environment_v0_82" stageName="buildStage" />
      </materials>
    </pipeline>
    <pipeline name="Build_jss_reports_v0_82" template="Implementation_Report">
      <params>
        <param name="pipeline_name">v0_82</param>
        <param name="branch">release-0.82</param>
        <param name="implementation_name">jss</param>
      </params>
      <materials>
        <git url="https://github.com/jss-emr/jss-reports.git" dest="#{implementation_name}-reports" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_Reports_v0_82" template="Bahmni-Reports">
      <params>
        <param name="pipeline_name">v0_82</param>
        <param name="rpm_version">0.82</param>
        <param name="branch">release-0.82</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-reports" branch="#{branch}" dest="bahmni-reports" />
        <pipeline pipelineName="Bahmni_environment_v0_82" stageName="buildStage" materialName="Bahmni_environment_v0_82" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
      </materials>
    </pipeline>
    <pipeline name="Bahmni_pacs_v0_82" template="Bahmni_pacs">
      <params>
        <param name="pipeline_name">v0_82</param>
        <param name="branch">release-0.82</param>
        <param name="rpm_version">0.82</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <materials>
        <git url="https://github.com/Bahmni/PACS-Integration.git" branch="#{branch}" dest="pacs_integration" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
        <pipeline pipelineName="Bahmni_environment_v0_82" stageName="buildStage" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_event_log_service_v0_82" template="event_log_service">
      <params>
        <param name="rpm_version">0.82</param>
        <param name="pipeline_name">v0_82</param>
        <param name="branch">release-0.82</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <materials>
        <git url="https://github.com/Bahmni/event-log-service.git" branch="#{branch}" dest="event-log-service" materialName="event_log_service" />
        <pipeline pipelineName="Bahmni_environment_v0_82" stageName="buildStage" materialName="Bahmni_environment_v0_82" />
        <git url="https://github.com/Bahmni/bahmni-package.git" branch="#{branch}" dest="bahmni_package" materialName="bahmni_package">
          <filter>
            <ignore pattern="**/*" />
          </filter>
        </git>
      </materials>
    </pipeline>
    <pipeline name="Release_To_Public_v0_82" template="Release_To_Public">
      <params>
        <param name="bahmni_version">0.82</param>
        <param name="pipeline_name">v0_82</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_v0_82" stageName="PackageInstaller" materialName="Artifacts" />
        <git url="https://github.com/Bahmni/utilities.git" dest="utilities" autoUpdate="false" materialName="Utilities" />
        <git url="https://github.com/Bahmni/bahmni-vagrant.git" dest="bahmni-vagrant" autoUpdate="false" materialName="bahmni-vagrant" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_Offline_v0_82" template="Bahmni_Offline">
      <params>
        <param name="pipeline_name">v0_82</param>
        <param name="branch">release-0.82</param>
        <param name="rpm_version">0.82</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <environmentvariables>
        <variable name="ADB_INSTALL_TIMEOUT">
          <value>8</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-offline.git" branch="#{branch}" dest="bahmni-offline" materialName="Offline_Sources" />
        <pipeline pipelineName="Bahmni_MRS_v0_82" stageName="BuildStage" materialName="Bahmni_MRS_v0_82" />
        <pipeline pipelineName="Build_default_config_v0_82" stageName="BuildStage" materialName="Build_default_config_v0_82" />
        <git url="https://github.com/Bahmni/emr-functional-tests.git" dest="emr-functional-tests" />
      </materials>
    </pipeline>
    <pipeline name="Create_Puppet_Installer">
      <params>
        <param name="pipeline_name">v0_82</param>
        <param name="bahmni_version">0.82-SNAPSHOT</param>
        <param name="branch">release-0.82</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_environment_v0_82" stageName="buildStage" materialName="env" />
        <pipeline pipelineName="OpenERP_v0_82" stageName="runFunctionalTestsStage" materialName="ERP" />
        <pipeline pipelineName="OpenElis_v0_82" stageName="Build" materialName="ELIS" />
        <pipeline pipelineName="Bahmni_MRS_v0_82" stageName="FunctionalTestStage" materialName="MRS" />
        <pipeline pipelineName="Bahmni_Reports_v0_82" stageName="BuildStage" materialName="Reports" />
        <pipeline pipelineName="Bahmni_pacs_v0_82" stageName="Build" materialName="PACS" />
        <pipeline pipelineName="ClientSideLogging" stageName="defaultStage" materialName="client_side_logging" />
        <pipeline pipelineName="Build_default_config_#{pipeline_name}" stageName="BuildStage" materialName="default_config" />
      </materials>
      <stage name="build_installer" cleanWorkingDir="true">
        <jobs>
          <job name="build">
            <tasks>
              <fetchartifact pipeline="Bahmni_environment_#{pipeline_name}" stage="buildStage" job="buildEnvironment" srcfile="bahmni-environment.zip">
                <runif status="passed" />
              </fetchartifact>
              <exec command="unzip">
                <arg>-qo</arg>
                <arg>bahmni-environment.zip</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="OpenERP_#{pipeline_name}" stage="runFunctionalTestsStage" job="runFunctionalTestsJob" srcdir="deployables">
                <runif status="passed" />
              </fetchartifact>
              <exec command="mv">
                <arg>deployables</arg>
                <arg>erp_deployables</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="OpenERP_#{pipeline_name}" stage="runFunctionalTestsStage" job="openerp-atomfeed-service" srcfile="openerp-atomfeed-service.war" dest="erp_deployables/">
                <runif status="passed" />
              </fetchartifact>
              <exec command="chmod">
                <arg>+x</arg>
                <arg>bahmni-environment/scripts/ci/erp_revision_log.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>./bahmni-environment/scripts/ci/erp_revision_log.sh &gt; erp_deployables/bahmni_openerp_revision.txt</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>bahmni-environment.zip</arg>
                <arg>erp_deployables/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>bahmni-environment/scripts/ci/create_module_installer.sh</arg>
                <arg>erp_deployables</arg>
                <arg>erp_installer.sh</arg>
                <arg>"ERP Installer"</arg>
                <arg>bahmni_openerp</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="OpenElis_#{pipeline_name}" stage="Build" job="build" srcdir="deployables">
                <runif status="passed" />
              </fetchartifact>
              <exec command="mv">
                <arg>deployables</arg>
                <arg>elis_deployables</arg>
                <runif status="passed" />
              </exec>
              <exec command="chmod">
                <arg>+x</arg>
                <arg>bahmni-environment/scripts/ci/elis_revision_log.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>./bahmni-environment/scripts/ci/elis_revision_log.sh &gt; elis_deployables/bahmni_openelis_revision.txt</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>bahmni-environment.zip</arg>
                <arg>elis_deployables/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>bahmni-environment/scripts/ci/create_module_installer.sh</arg>
                <arg>elis_deployables</arg>
                <arg>elis_installer.sh</arg>
                <arg>"Elis Installer"</arg>
                <arg>bahmni_openelis</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="FunctionalTestStage" job="FunctionalTests" srcdir="deployables">
                <runif status="passed" />
              </fetchartifact>
              <exec command="mv">
                <arg>deployables</arg>
                <arg>mrs_deployables</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="BuildDistroStage" job="BahmniDistro" srcfile="openmrs-distro-bahmni-artifacts/distro-#{bahmni_version}-distro.zip" dest="mrs_deployables">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="BuildStage" job="BahmniApps" srcfile="bahmniapps.zip" dest="mrs_deployables">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="ClientSideLogging" stage="defaultStage" job="Nothing" srcdir="client_side_logging" dest="mrs_deployables">
                <runif status="passed" />
              </fetchartifact>
              <exec command="chmod">
                <arg>+x</arg>
                <arg>bahmni-environment/scripts/ci/bahmni_revision_log.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>./bahmni-environment/scripts/ci/bahmni_revision_log.sh &gt; mrs_deployables/bahmni_openmrs_revision.txt</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>bahmni-environment.zip</arg>
                <arg>mrs_deployables/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>bahmni-environment/scripts/ci/create_module_installer.sh</arg>
                <arg>mrs_deployables</arg>
                <arg>mrs_installer.sh</arg>
                <arg>"MRS Installer"</arg>
                <arg>bahmni_openmrs</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_Reports_#{pipeline_name}" stage="BuildStage" job="Build-Bahmni-Reports" srcfile="deployables/bahmnireports.war" dest="reports_deployables">
                <runif status="passed" />
              </fetchartifact>
              <exec command="cp">
                <arg>bahmni-environment.zip</arg>
                <arg>reports_deployables/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>bahmni-environment/scripts/ci/create_module_installer.sh</arg>
                <arg>reports_deployables</arg>
                <arg>bahmni_reports_installer.sh</arg>
                <arg>"Bahmni Reports Installer"</arg>
                <arg>bahmni_reports</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_pacs_#{pipeline_name}" stage="Build" job="build" srcfile="deployables/pacs-integration.war" dest="pacs_deployables">
                <runif status="passed" />
              </fetchartifact>
              <exec command="cp">
                <arg>bahmni-environment.zip</arg>
                <arg>pacs_deployables/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>bahmni-environment/scripts/ci/create_module_installer.sh</arg>
                <arg>pacs_deployables</arg>
                <arg>bahmni_pacs_installer.sh</arg>
                <arg>"Bahmni PACS Installer"</arg>
                <arg>bahmni_pacs</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>deployables</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>bahmni-environment/collect_installers.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>bahmni-environment/scripts/ci/bahmni_deploy.sh</arg>
                <arg>deployables</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>bahmni-environment.zip</arg>
                <arg>deployables/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>bahmni-environment/scripts/ci/create_bahmni_installer.sh</arg>
                <arg>deployables</arg>
                <arg>bahmni_installer</arg>
                <arg>"Bahmni Installer"</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Build_default_config_#{pipeline_name}" stage="BuildStage" job="Build" srcfile="default_config.zip" dest="config_deployables">
                <runif status="passed" />
              </fetchartifact>
              <exec command="cp">
                <arg>bahmni-environment.zip</arg>
                <arg>config_deployables/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>bahmni-environment/scripts/ci/create_module_installer.sh</arg>
                <arg>config_deployables</arg>
                <arg>default_config_installer.sh</arg>
                <arg>"Implementation Config Installer"</arg>
                <arg>implementation_config</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>-c</arg>
                <arg>mv default_config_installer.sh installer/default_config_installer_${GO_PIPELINE_COUNTER}.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="installer" />
              <artifact src="deployables" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="OpenMRS_v0_82" template="OpenMRS">
      <params>
        <param name="rpm_version">0.82</param>
        <param name="branch_version">release-0.82</param>
      </params>
      <materials>
        <git url="https://github.com/bahmni/bahmni-package" branch="#{branch_version}" dest="bahmni-package" materialName="bahmni_package" />
        <git url="https://github.com/Bahmni/emr-functional-tests" branch="#{branch_version}" shallowClone="true" dest="emr-functional-tests" materialName="emrft" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Deploy_29">
    <authorization>
      <view>
        <user>guest</user>
      </view>
    </authorization>
    <pipeline name="Deploy_Dot29_Ansible" template="Ansible_Deploy">
      <params>
        <param name="release_version">v0_84</param>
        <param name="implementation_name">default</param>
        <param name="env_name">dot29</param>
        <param name="installer_location">/var/lib/go-agent/pipelines/Deploy_Dot29_Ansible/rpms</param>
        <param name="config_url">https://github.com/Bahmni/default-config/archive/master.zip</param>
        <param name="base_path">/var/lib/go-agent/pipelines/Deploy_Dot29_Ansible</param>
        <param name="two_factor_auth">enabled</param>
        <param name="run_playbook_tests">no</param>
        <param name="implementer_interface">disabled</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{release_version}" stageName="PackageInstaller" />
        <git url="https://github.com/Bahmni/bahmni-tw-playbooks.git" dest="bahmni-tw-playbooks" autoUpdate="false" materialName="playbooks" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Deploy_QA">
    <authorization>
      <view>
        <user>guest</user>
        <role>deploy</role>
      </view>
      <operate>
        <role>deploy</role>
      </operate>
    </authorization>
    <pipeline name="Deploy_Dot10_Ansible" template="Ansible_Deploy">
      <params>
        <param name="release_version">v0_82</param>
        <param name="implementation_name">default</param>
        <param name="env_name">dot10</param>
        <param name="installer_location">/var/lib/go-agent/pipelines/Deploy_Dot10_Ansible/rpms</param>
        <param name="config_url">https://github.com/Bahmni/default-config/archive/release-0.82.zip</param>
        <param name="base_path">/var/lib/go-agent/pipelines/Deploy_Dot10_Ansible</param>
        <param name="two_factor_auth">disabled</param>
        <param name="run_playbook_tests">no</param>
        <param name="implementer_interface">disabled</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{release_version}" stageName="PackageInstaller" />
        <git url="https://github.com/Bahmni/bahmni-tw-playbooks.git" dest="bahmni-tw-playbooks" autoUpdate="false" materialName="playbooks" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Deploy_Demo">
    <authorization>
      <view>
        <user>guest</user>
      </view>
    </authorization>
    <pipeline name="Reports_Deploy_Demo" template="Reports_Deploy">
      <params>
        <param name="branch">master</param>
        <param name="pipeline_name">v0_82</param>
        <param name="implementation_name">jss</param>
      </params>
      <materials>
        <pipeline pipelineName="Build_jss_reports_v0_82" stageName="Package" />
      </materials>
    </pipeline>
    <pipeline name="Bahmni_All_Deploy_Demo_temp" template="All_Deploy">
      <params>
        <param name="pipeline_name">v0_82</param>
        <param name="branch">master</param>
        <param name="implementation_name">default</param>
      </params>
      <environmentvariables>
        <variable name="IMPLEMENTATION_NAME">
          <value>default</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>jss</value>
        </variable>
      </environmentvariables>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{pipeline_name}" stageName="CollectArtefactsStage" />
        <pipeline pipelineName="Build_#{implementation_name}_config_#{pipeline_name}" stageName="Package" />
      </materials>
    </pipeline>
    <pipeline name="Database_Backup_Demo" isLocked="false" template="Database_Backup">
      <params>
        <param name="branch">master</param>
      </params>
      <timer>0 0 22 * * ?</timer>
      <environmentvariables>
        <variable name="mysqlPassword">
          <value>password</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-environment.git" branch="#{branch}" dest="bahmni-environment" />
      </materials>
    </pipeline>
    <pipeline name="Clear_Cache_Demo" isLocked="false">
      <params>
        <param name="branch">master</param>
      </params>
      <timer>0 57 11 ? * *</timer>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-environment.git" dest="bahmni-environment" />
      </materials>
      <stage name="defaultStage" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo chmod -R 777 /var/cache/mod_proxy &amp;&amp; sudo rm -rf /var/cache/mod_proxy/* &amp;&amp; sudo chmod 700 /var/cache/mod_proxy</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cache</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Deploy_Anonymized_Data" template="Restore_Anonymized_Data_Dump">
      <params>
        <param name="branch">master</param>
        <param name="implementation_name">jss</param>
        <param name="aws_access_key">AKIAJJWQSOFOG5YOJ3QA</param>
        <param name="aws_secret_key">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</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-environment" branch="#{branch}" dest="bahmni-environment" materialName="bahmni-environment" />
      </materials>
    </pipeline>
    <pipeline name="Create_Anonymised_Data_Dump" template="Create_Anonymized_Data_Dump">
      <params>
        <param name="branch">master</param>
        <param name="implementation_name">jss</param>
        <param name="mysql_password">password</param>
        <param name="aws_access_key">AKIAJJWQSOFOG5YOJ3QA</param>
        <param name="aws_secret_key">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</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-environment" branch="#{branch}" dest="bahmni-environment" materialName="bahmni-environment" />
      </materials>
    </pipeline>
    <pipeline name="Deploy_Demo_All">
      <params>
        <param name="bahmni_release_version">0.82</param>
        <param name="branch">release-0.82</param>
        <param name="implementation_name">default</param>
        <param name="pipeline_name">v0_82</param>
      </params>
      <environmentvariables>
        <variable name="IMPLEMENTATION_NAME">
          <value>default</value>
        </variable>
        <variable name="FACTER_implementation_name">
          <value>default</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_bacteriology">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <pipeline pipelineName="Bahmni_#{pipeline_name}" stageName="fetchArtifacts" />
        <pipeline pipelineName="Build_#{implementation_name}_config_#{pipeline_name}" stageName="Package" />
      </materials>
      <stage name="defaultStage">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>installer/</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_#{pipeline_name}" stage="fetchArtifacts" job="fetch" srcdir="installer">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="installer">
                <arg>-c</arg>
                <arg>cp bahmni_installer_*.sh bahmni_installer.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="installer">
                <arg>-c</arg>
                <arg>cp #{implementation_name}_config_installer_*.sh #{implementation_name}_config_installer.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="wget" workingdir="installer">
                <arg>https://raw.githubusercontent.com/Bahmni/bahmni-environment/master/scripts/ci/all_deploy_tasks.sh</arg>
                <arg>--no-check-certificate</arg>
                <arg>-O</arg>
                <arg>all_deploy_tasks.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo" workingdir="installer">
                <arg>-E</arg>
                <arg>sh</arg>
                <arg>all_deploy_tasks.sh</arg>
                <arg>#{implementation_name}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="External_Dependencies">
    <authorization>
      <view>
        <user>guest</user>
        <role>guest</role>
      </view>
    </authorization>
    <pipeline name="ICT4H">
      <materials>
        <git url="https://github.com/ICT4H/atomfeed.git" dest="atomfeed" />
      </materials>
      <stage name="BuildStage">
        <jobs>
          <job name="AtomFeed">
            <tasks>
              <exec command="/home/jss/apache-maven-3.0.5/bin/mvn" workingdir="atomfeed">
                <arg>clean</arg>
                <arg>deploy</arg>
                <arg>-PIT</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="openmrs-module-bedmanagement">
      <materials>
        <git url="https://github.com/openmrs/openmrs-module-bedmanagement.git" />
      </materials>
      <stage name="buildStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/home/jss/apache-maven-3.0.5/bin/mvn">
                <arg>clean</arg>
                <arg>deploy</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="openmrs-atomfeed">
      <materials>
        <git url="https://github.com/ICT4H/openmrs-atomfeed.git" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/home/jss/apache-maven-3.0.5/bin/mvn">
                <arg>clean</arg>
                <arg>deploy</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="openmrs-module-webservices.rest">
      <materials>
        <git url="https://github.com/Bahmni/openmrs-module-webservices.rest" branch="release-2.12" materialName="bahmni-webservices-rest" />
      </materials>
      <stage name="buildStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/home/jss/apache-maven-3.0.5/bin/mvn">
                <arg>clean</arg>
                <arg>deploy</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yum-repo</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="openmrs-module-episodes">
      <materials>
        <git url="https://github.com/Bahmni/openmrs-module-episodes" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="mvn">
                <arg>clean</arg>
                <arg>deploy</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Build_bacteriology" template="Build_bacteriology">
      <params>
        <param name="branch">master</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/bacteriology.git" branch="#{branch}" dest="bacteriology" />
      </materials>
    </pipeline>
    <pipeline name="Build_Bahmni_Offline_Sync" isLocked="false" template="Build_Bahmni_Offline_Sync">
      <materials>
        <git url="https://github.com/Bahmni/bahmni-offline-sync.git" />
      </materials>
    </pipeline>
    <pipeline name="idgen_webservices">
      <materials>
        <git url="https://github.com/Bahmni/openmrs-module-idgen-webservices" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="mvn">
                <arg>clean</arg>
                <arg>deploy</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="rules_engine_omod" template="Rules_Engine">
      <materials>
        <git url="https://github.com/Bahmni/openmrs-module-rulesengine" dest="openmrs-module-rulesengine" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Deploy_Nepal">
    <authorization>
      <view>
        <user>guest</user>
        <role>deploy</role>
      </view>
      <operate>
        <role>deploy</role>
      </operate>
    </authorization>
    <pipeline name="Bahmni_All_Deploy_Nepal" template="All_Deploy">
      <params>
        <param name="pipeline_name">v0_82</param>
        <param name="branch">master</param>
        <param name="bahmni_user_name">jss</param>
        <param name="implementation_name">jss</param>
      </params>
      <environmentvariables>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>jss</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="ci-admin" secure="true">
          <encryptedValue>m8gn3r8BRJfN89cr1NXTBQ==</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{pipeline_name}" stageName="CollectArtefactsStage" />
        <pipeline pipelineName="Build_#{implementation_name}_config_#{pipeline_name}" stageName="Package" />
      </materials>
    </pipeline>
    <pipeline name="Config_Deploy_Nepal" template="Config_Deploy">
      <params>
        <param name="branch">master</param>
        <param name="pipeline_name">v0_82</param>
        <param name="implementation_name">possible</param>
      </params>
      <materials>
        <pipeline pipelineName="Build_possible_config_#{pipeline_name}" stageName="BuildStage" />
        <git url="https://github.com/Bahmni/bahmni-environment.git" branch="#{branch}" dest="bahmni-environment" />
      </materials>
    </pipeline>
    <pipeline name="Restore_Latest_Prod_DB" isLocked="false">
      <params>
        <param name="backup_dir">/backup</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-environment.git" />
      </materials>
      <stage name="defaultStage">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="sudo">
                <arg>mysql_db</arg>
                <arg>=</arg>
                <arg>$(find #{backup_dir} -name "mysql_backup*" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" ")</arg>
                <arg>&amp;&amp;</arg>
                <arg>scripts/restore-mysql.sh</arg>
                <arg>password</arg>
                <arg>$(echo $mysql_db)</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>shruthi</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Deploy_Dot13_Ansible" template="Ansible_Deploy">
      <params>
        <param name="release_version">v0_84</param>
        <param name="implementation_name">jss</param>
        <param name="env_name">dot13</param>
        <param name="installer_location">/var/lib/go-agent/pipelines/Deploy_Dot13_Ansible/rpms</param>
        <param name="config_url">https://github.com/Bahmni/jss-config/archive/master.zip</param>
        <param name="base_path">/var/lib/go-agent/pipelines/Deploy_Dot13_Ansible</param>
        <param name="two_factor_auth">disabled</param>
        <param name="run_playbook_tests">no</param>
        <param name="implementer_interface">disabled</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{release_version}" stageName="PackageInstaller" />
        <git url="https://github.com/Bahmni/bahmni-tw-playbooks.git" dest="bahmni-tw-playbooks" autoUpdate="false" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Deploy_Dot6">
    <authorization>
      <view>
        <user>guest</user>
        <role>deploy</role>
      </view>
      <operate>
        <role>deploy</role>
      </operate>
    </authorization>
    <pipeline name="Anonymise_Dot6" template="Anonymise">
      <params>
        <param name="branch">release-5.3</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-environment.git" branch="#{branch}" dest="bahmni-environment" />
      </materials>
    </pipeline>
    <pipeline name="Deploy_Dot6_Ansible" template="Ansible_Deploy">
      <params>
        <param name="release_version">v0_82</param>
        <param name="implementation_name">jss</param>
        <param name="env_name">dot6_dot31</param>
        <param name="installer_location">/var/lib/go-agent/pipelines/Deploy_Dot6_Ansible/rpms</param>
        <param name="config_url">https://github.com/Bahmni/jss-config/archive/release-0.82.zip</param>
        <param name="base_path">/var/lib/go-agent/pipelines/Deploy_Dot6_Ansible</param>
        <param name="two_factor_auth">disabled</param>
        <param name="run_playbook_tests">no</param>
        <param name="implementer_interface">disabled</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{release_version}" stageName="PackageInstaller" />
        <git url="https://github.com/Bahmni/bahmni-tw-playbooks.git" branch="release-0.82" dest="bahmni-tw-playbooks" autoUpdate="false" materialName="playbooks" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Bahmni_Utility">
    <authorization>
      <view>
        <user>guest</user>
      </view>
    </authorization>
    <pipeline name="Run_On_All_Agents" isLocked="false">
      <materials>
        <git url="https://github.com/Bahmni/bahmni-scripts.git" autoUpdate="false" />
      </materials>
      <stage name="runOnAllAgents">
        <jobs>
          <job name="runOnAllAgents" runOnAllAgents="true">
            <tasks>
              <exec command="/bin/bash">
                <arg>run-on-all-agents.sh</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="cleanup-go-server" isLocked="false">
      <timer>0 0 22 ? * *</timer>
      <materials>
        <git url="https://github.com/Bahmni/gocd-janitor.git" dest="gocd-janitor" materialName="gocd-janitor" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/home/jss/apache-maven-3.0.5/bin/mvn" workingdir="gocd-janitor">
                <arg>clean</arg>
                <arg>package</arg>
                <runif status="passed" />
              </exec>
              <exec command="java" workingdir="gocd-janitor">
                <arg>-Xmx4096m</arg>
                <arg>-cp</arg>
                <arg>target/gocd-janitor-0.0.1-jar-with-dependencies.jar</arg>
                <arg>in.ashwanthkumar.gocd.artifacts.Janitor</arg>
                <arg>--conf</arg>
                <arg>/opt/gocd-purge-bahmni.conf</arg>
                <arg>--delete-artifacts</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Deploy_27">
    <authorization>
      <view>
        <user>guest</user>
      </view>
    </authorization>
    <pipeline name="Deploy_Dot27_Ansible" template="Ansible_Deploy">
      <params>
        <param name="release_version">v0_83</param>
        <param name="implementation_name">default</param>
        <param name="env_name">dot27</param>
        <param name="installer_location">/var/lib/go-agent/pipelines/Deploy_Dot27_Ansible/rpms</param>
        <param name="config_url">https://github.com/Bahmni/default-config/archive/release-0.83.zip</param>
        <param name="base_path">/var/lib/go-agent/pipelines/Deploy_Dot27_Ansible</param>
        <param name="two_factor_auth">disabled</param>
        <param name="run_playbook_tests">no</param>
        <param name="implementer_interface">disabled</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{release_version}" stageName="PackageInstaller" />
        <git url="https://github.com/Bahmni/bahmni-tw-playbooks.git" dest="bahmni-tw-playbooks" autoUpdate="false" materialName="playbooks" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Soaktest_Env_Group">
    <authorization>
      <view>
        <user>guest</user>
      </view>
    </authorization>
    <pipeline name="Run_Functional_Tests_Soak" isLocked="true">
      <timer>0 0/15 * * * ?</timer>
      <environmentvariables>
        <variable name="TEST_ENV">
          <value>soak</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/emr-functional-tests.git" branch="release-0.78" dest="emr-functional-tests" autoUpdate="false" materialName="EMR_Functional_Tests" />
      </materials>
      <stage name="defaultStage" cleanWorkingDir="true">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/bin/bash" workingdir="emr-functional-tests">
                <arg>--login</arg>
                <arg>-c</arg>
                <arg>scripts/run.sh</arg>
                <runif status="passed" />
                <oncancel>
                  <exec command="sudo">
                    <arg>-E</arg>
                    <arg>/bin/bash</arg>
                    <arg>--login</arg>
                    <arg>kill -TERM -$(ps aux | grep 'run.sh' | grep -v grep | awk '{print $2}')</arg>
                  </exec>
                </oncancel>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Bahmni_All_Deploy_Soaktest" isLocked="false">
      <params>
        <param name="pipeline_name">v0_82</param>
        <param name="implementation_name">default</param>
        <param name="branch">master</param>
      </params>
      <environmentvariables>
        <variable name="IMPLEMENTATION_NAME">
          <value>default</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>bahmni</value>
        </variable>
        <variable name="FACTER_bahmni_active_machine_ip">
          <value>127.0.0.1</value>
        </variable>
      </environmentvariables>
      <materials>
        <pipeline pipelineName="Build_#{implementation_name}_config_#{pipeline_name}" stageName="Package" />
        <pipeline pipelineName="Bahmni_artifacts_#{pipeline_name}" stageName="CollectArtefactsStage" />
      </materials>
      <stage name="defaultStage" cleanWorkingDir="true">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <tasks>
              <fetchartifact pipeline="Bahmni_artifacts_#{pipeline_name}" stage="CollectArtefactsStage" job="defaultJob" srcdir="installer">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>mv installer/bahmni_installer_*.sh bahmni_installer.sh</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Build_#{implementation_name}_config_#{pipeline_name}" stage="Package" job="package" srcdir="installer">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>mv installer/#{implementation_name}_config_installer_*.sh #{implementation_name}_config_installer.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="wget">
                <arg>https://raw.githubusercontent.com/Bahmni/bahmni-environment/master/scripts/ci/all_deploy_tasks.sh</arg>
                <arg>--no-check-certificate</arg>
                <arg>-O</arg>
                <arg>all_deploy_tasks.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>/bin/bash</arg>
                <arg>./all_deploy_tasks.sh</arg>
                <arg>#{implementation_name}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Production">
    <authorization>
      <view>
        <user>guest</user>
      </view>
    </authorization>
  </pipelines>
  <pipelines group="Deploy_EndTB">
    <authorization>
      <view>
        <user>guest</user>
      </view>
    </authorization>
    <pipeline name="Deploy_EndTB_QA" template="Ansible_Deploy">
      <params>
        <param name="branch">master</param>
        <param name="release_version">v0_83</param>
        <param name="implementation_name">endtb</param>
        <param name="env_name">dot35</param>
        <param name="db_dump_required">false</param>
        <param name="db_dump_url_location">https://172.18.2.30/mysql_dump.sql</param>
        <param name="installer_location">/var/lib/go-agent/pipelines/Deploy_EndTB_QA/rpms</param>
        <param name="config_url">https://github.com/Bahmni/endtb-config/archive/master.zip</param>
        <param name="base_path">/var/lib/go-agent/pipelines/Deploy_EndTB_QA</param>
        <param name="two_factor_auth">disabled</param>
        <param name="run_playbook_tests">no</param>
        <param name="implementer_interface">disabled</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{release_version}" stageName="PackageInstaller" />
        <git url="https://github.com/Bahmni/bahmni-tw-playbooks.git" dest="bahmni-tw-playbooks" autoUpdate="false" materialName="playbooks" />
      </materials>
    </pipeline>
    <pipeline name="Deploy_EndTB_Showcase" template="Ansible_Deploy">
      <params>
        <param name="branch">master</param>
        <param name="release_version">v0_82</param>
        <param name="implementation_name">endtb</param>
        <param name="env_name">dot37</param>
        <param name="db_dump_required">false</param>
        <param name="db_dump_url_location">https://172.18.2.30/mysql_dump.sql</param>
        <param name="installer_location">/var/lib/go-agent/pipelines/Deploy_EndTB_Showcase/rpms</param>
        <param name="config_url">https://github.com/Bahmni/endtb-config/archive/master.zip</param>
        <param name="base_path">/var/lib/go-agent/pipelines/Deploy_EndTB_Showcase</param>
        <param name="two_factor_auth">disabled</param>
        <param name="run_playbook_tests">no</param>
        <param name="implementer_interface">disabled</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{release_version}" stageName="PackageInstaller" />
        <git url="https://github.com/Bahmni/bahmni-tw-playbooks.git" dest="bahmni-tw-playbooks" autoUpdate="false" materialName="playbooks" />
      </materials>
    </pipeline>
    <pipeline name="Deploy_EndTB_Impl" template="Ansible_Deploy">
      <params>
        <param name="branch">master</param>
        <param name="release_version">v0_84</param>
        <param name="implementation_name">default</param>
        <param name="env_name">dot30</param>
        <param name="db_dump_required">false</param>
        <param name="db_dump_url_location" />
        <param name="installer_location">/var/lib/go-agent/pipelines/Deploy_EndTB_Impl/rpms</param>
        <param name="config_url">https://github.com/Bahmni/default-config/archive/master.zip</param>
        <param name="base_path">/var/lib/go-agent/pipelines/Deploy_EndTB_Impl</param>
        <param name="two_factor_auth">disabled</param>
        <param name="run_playbook_tests">yes</param>
        <param name="implementer_interface">disabled</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{release_version}" stageName="PackageInstaller" />
        <git url="https://github.com/Bahmni/bahmni-tw-playbooks.git" dest="bahmni-tw-playbooks" autoUpdate="false" materialName="playbooks" />
      </materials>
    </pipeline>
    <pipeline name="Deploy_EndTB_UAT" template="Ansible_Deploy">
      <params>
        <param name="branch">master</param>
        <param name="release_version">v0_82</param>
        <param name="implementation_name">endtb</param>
        <param name="env_name">dot41</param>
        <param name="db_dump_required">false</param>
        <param name="db_dump_url_location">https://172.18.2.30/mysql_dump.sql</param>
        <param name="installer_location">/var/lib/go-agent/pipelines/Deploy_EndTB_UAT/rpms</param>
        <param name="config_url">https://github.com/Bahmni/endtb-config/archive/master.zip</param>
        <param name="base_path">/var/lib/go-agent/pipelines/Deploy_EndTB_UAT</param>
        <param name="two_factor_auth">disabled</param>
        <param name="run_playbook_tests">no</param>
        <param name="implementer_interface">disabled</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{release_version}" stageName="PackageInstaller" />
        <git url="https://github.com/Bahmni/bahmni-tw-playbooks.git" dest="bahmni-tw-playbooks" autoUpdate="false" materialName="playbooks" />
      </materials>
    </pipeline>
    <pipeline name="Deploy_EndTB_UAT_Frankfurt" template="Ansible_Deploy">
      <params>
        <param name="base_path">/var/lib/go-agent/pipelines/Deploy_EndTB_UAT_Frankfurt</param>
        <param name="installer_location">/var/lib/go-agent/pipelines/Deploy_EndTB_UAT_Frankfurt/rpms</param>
        <param name="implementation_name">endtb</param>
        <param name="env_name">amazon-endtb-msf</param>
        <param name="branch">master</param>
        <param name="config_url">https://github.com/Bahmni/endtb-config/archive/master.zip</param>
        <param name="release_version">v0_82</param>
        <param name="two_factor_auth">disabled</param>
        <param name="run_playbook_tests">no</param>
        <param name="implementer_interface">disabled</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{release_version}" stageName="PackageInstaller" />
        <git url="https://github.com/Bahmni/bahmni-tw-playbooks.git" dest="bahmni-tw-playbooks" autoUpdate="false" materialName="playbooks" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Deploy_34">
    <authorization>
      <view>
        <user>guest</user>
      </view>
    </authorization>
    <pipeline name="Bahmni_All_Deploy_34" template="All_Deploy">
      <params>
        <param name="pipeline_name">v0_82</param>
        <param name="implementation_name">default</param>
        <param name="branch">master</param>
      </params>
      <environmentvariables>
        <variable name="IMPLEMENTATION_NAME">
          <value>default</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>bahmni</value>
        </variable>
        <variable name="FACTER_bahmni_active_machine_ip">
          <value>127.0.0.1</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_appointments">
          <value>false</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_pacs">
          <value>true</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_bacteriology">
          <value>true</value>
        </variable>
        <variable name="ci-admin" secure="true">
          <encryptedValue>m8gn3r8BRJfN89cr1NXTBQ==</encryptedValue>
        </variable>
      </environmentvariables>
      <materials>
        <pipeline pipelineName="Build_#{implementation_name}_config_#{pipeline_name}" stageName="Package" />
        <pipeline pipelineName="Bahmni_artifacts_#{pipeline_name}" stageName="CollectArtefactsStage" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Bahmni_Release_0_82">
    <authorization>
      <view>
        <user>guest</user>
      </view>
    </authorization>
    <pipeline name="Bahmni_v0_82" template="Release">
      <params>
        <param name="artifact_source">v0_82</param>
        <param name="bahmni_release_version">0.82</param>
      </params>
      <mingle baseUrl="https://bahmni.mingle.thoughtworks.com" projectIdentifier="bahmni_emr">
        <mqlGroupingConditions />
      </mingle>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{artifact_source}" stageName="CollectArtefactsStage" />
        <pipeline pipelineName="Build_default_config_#{artifact_source}" stageName="Package" />
        <pipeline pipelineName="Bahmni_environment_#{artifact_source}" stageName="buildStage" />
        <pipeline pipelineName="Build_possible_config_#{artifact_source}" stageName="Package" />
        <pipeline pipelineName="Build_jss_config_#{artifact_source}" stageName="Package" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Deploy_42">
    <authorization>
      <view>
        <user>guest</user>
      </view>
    </authorization>
  </pipelines>
  <pipelines group="Deploy_Demo_Backup">
    <authorization>
      <view>
        <user>guest</user>
      </view>
    </authorization>
    <pipeline name="Bahmni_All_Deploy_Demo_temp_Backup" template="All_Deploy">
      <params>
        <param name="pipeline_name">v0_82</param>
        <param name="branch">release-0.82</param>
        <param name="implementation_name">default</param>
      </params>
      <environmentvariables>
        <variable name="IMPLEMENTATION_NAME">
          <value>default</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>jss</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_bacteriology">
          <value>true</value>
        </variable>
      </environmentvariables>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{pipeline_name}" stageName="CollectArtefactsStage" />
        <pipeline pipelineName="Build_#{implementation_name}_config_#{pipeline_name}" stageName="Package" />
      </materials>
    </pipeline>
    <pipeline name="Database_Backup_Demo_backup" isLocked="false" template="Database_Backup">
      <params>
        <param name="branch">master</param>
      </params>
      <timer>0 0 22 * * ?</timer>
      <environmentvariables>
        <variable name="mysqlPassword">
          <value>password</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-environment.git" branch="#{branch}" dest="bahmni-environment" />
      </materials>
    </pipeline>
    <pipeline name="Clear_Cache_Demo_backup" isLocked="false">
      <params>
        <param name="branch">master</param>
      </params>
      <timer>0 57 11 ? * *</timer>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-environment.git" dest="bahmni-environment" />
      </materials>
      <stage name="defaultStage" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo chmod -R 777 /var/cache/mod_proxy &amp;&amp; sudo rm -rf /var/cache/mod_proxy/* &amp;&amp; sudo chmod 700 /var/cache/mod_proxy</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cache</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Deploy_Anonymized_Data_backup" template="Restore_Anonymized_Data_Dump">
      <params>
        <param name="branch">master</param>
        <param name="implementation_name">jss</param>
        <param name="aws_access_key">AKIAJJWQSOFOG5YOJ3QA</param>
        <param name="aws_secret_key">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</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-environment" branch="#{branch}" dest="bahmni-environment" materialName="bahmni-environment" />
      </materials>
    </pipeline>
    <pipeline name="Create_Anonymised_Data_Dump_backup" template="Create_Anonymized_Data_Dump">
      <params>
        <param name="branch">master</param>
        <param name="implementation_name">jss</param>
        <param name="mysql_password">password</param>
        <param name="aws_access_key">AKIAJJWQSOFOG5YOJ3QA</param>
        <param name="aws_secret_key">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</param>
      </params>
      <materials>
        <git url="https://github.com/Bahmni/bahmni-environment" branch="#{branch}" dest="bahmni-environment" materialName="bahmni-environment" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Bahmni_Nagios">
    <authorization>
      <view>
        <user>guest</user>
      </view>
    </authorization>
    <pipeline name="Bahmni_Nagios" template="Nagios_Deploy">
      <params>
        <param name="env_name">nagios</param>
        <param name="base_path">/var/lib/go-agent/pipelines/Bahmni_Nagios</param>
        <param name="installer_location">/var/lib/go-agent/pipelines/Bahmni_Nagios/rpms</param>
        <param name="release_version">v0_82</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{release_version}" stageName="PackageInstaller" />
        <git url="https://github.com/Bahmni/bahmni-tw-playbooks.git" dest="bahmni-tw-playbooks" autoUpdate="false" materialName="playbooks" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="yum_poller_test">
    <pipeline name="test">
      <materials>
        <package ref="f47cf922-03db-40d2-a0e5-9e67fa962b8b" />
        <git url="https://github.com/Bahmni/external-auth" materialName="config" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="echo">
                <arg>"test"</arg>
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>curl -O $GO_PACKAGE_BAHMNIYUM_BAHMNI_INSTALLER_LOCATION</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Deploy_46">
    <pipeline name="Deploy_Dot46" template="Ansible_Deploy">
      <params>
        <param name="release_version">v0_84</param>
        <param name="implementation_name">default</param>
        <param name="env_name">dot46</param>
        <param name="installer_location">/var/lib/go-agent/pipelines/Deploy_Dot46/rpms</param>
        <param name="config_url">https://github.com/Bahmni/default-config/archive/master.zip</param>
        <param name="base_path">/var/lib/go-agent/pipelines/Deploy_Dot46</param>
        <param name="two_factor_auth">disabled</param>
        <param name="run_playbook_tests">no</param>
        <param name="implementer_interface">disabled</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_#{release_version}" stageName="PackageInstaller" />
        <git url="https://github.com/Bahmni/bahmni-tw-playbooks.git" dest="bahmni-tw-playbooks" autoUpdate="false" materialName="playbooks" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Implementer_Interface">
    <pipeline name="implementer-interface">
      <materials>
        <git url="https://github.com/Bahmni/implementer-interface.git" dest="implementer-interface" />
      </materials>
      <stage name="Build">
        <jobs>
          <job name="Build">
            <tasks>
              <exec command="npm" workingdir="implementer-interface">
                <arg>cache</arg>
                <arg>clean</arg>
                <runif status="passed" />
              </exec>
              <exec command="npm" workingdir="implementer-interface">
                <arg>install</arg>
                <runif status="passed" />
              </exec>
              <exec command="npm" workingdir="implementer-interface">
                <arg>run</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
              <exec command="npm" workingdir="implementer-interface">
                <arg>run</arg>
                <arg>ci</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>UI</resource>
            </resources>
            <artifacts>
              <artifact src="implementer-interface/dist/implementer_interface.zip" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="package">
        <jobs>
          <job name="package-rpm">
            <tasks>
              <fetchartifact pipeline="implementer-interface" stage="Build" job="Build" srcfile="implementer_interface.zip" dest="implementer-interface/package/resources/">
                <runif status="passed" />
              </fetchartifact>
              <exec command="./gradlew" workingdir="implementer-interface/package">
                <arg>clean</arg>
                <arg>buildRpm</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="implementer-interface/package/build/distributions/bahmni-implementer-interface-*.rpm" dest="implementer-interface-package" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="publish">
        <jobs>
          <job name="publish-artifacts-to-yum-repo">
            <tasks>
              <fetchartifact pipeline="implementer-interface" stage="package" job="package-rpm" srcdir="implementer-interface-package" dest="artifacts">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="artifacts">
                <arg>-c</arg>
                <arg>yes | sudo cp -f implementer-interface-package/bahmni-implementer-interface-*.rpm /var/www/rpm/bahmni/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo createrepo --update /var/www/rpm/bahmni/</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yum-repo</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="form_controls">
      <materials>
        <git url="https://github.com/Bahmni/form-controls.git" dest="form-controls" />
      </materials>
      <stage name="Build">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="npm" workingdir="form-controls">
                <arg>cache</arg>
                <arg>clean</arg>
              </exec>
              <exec command="npm" workingdir="form-controls">
                <arg>install</arg>
                <runif status="passed" />
              </exec>
              <exec command="npm" workingdir="form-controls">
                <arg>run</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
              <exec command="npm" workingdir="form-controls">
                <arg>run</arg>
                <arg>ci</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>UI</resource>
            </resources>
            <artifacts>
              <artifact src="form-controls/dist/bundle.js" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Deploy_SEARCH">
    <pipeline name="Deploy_SEARCH" template="Ansible_Deploy">
      <params>
        <param name="base_path">/var/lib/go-agent/pipelines/Deploy_SEARCH</param>
        <param name="installer_location">/var/lib/go-agent/pipelines/Deploy_SEARCH/rpms</param>
        <param name="run_playbook_tests">no</param>
        <param name="implementation_name">search</param>
        <param name="env_name">search_qa</param>
        <param name="config_url">https://github.com/Bahmni/search-config/archive/master.zip</param>
        <param name="two_factor_auth">disabled</param>
        <param name="release_version">v0_83</param>
        <param name="implementer_interface">disabled</param>
      </params>
      <materials>
        <pipeline pipelineName="Bahmni_artifacts_v0_83" stageName="PackageInstaller" />
        <git url="https://github.com/Bahmni/bahmni-tw-playbooks.git" dest="bahmni-tw-playbooks" autoUpdate="false" materialName="tw-playbooks" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Bahmni_Transifex">
    <pipeline name="bahmni-transifex">
      <params>
        <param name="rpm_version">1.0</param>
      </params>
      <materials>
        <git url="https://github.com/binduak/bahmni-package" autoUpdate="false" />
      </materials>
      <stage name="defaultStage" cleanWorkingDir="true">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="pwd" workingdir="bahmni-transifex">
                <runif status="passed" />
              </exec>
              <exec command="/usr/bin/tx" workingdir="bahmni-transifex">
                <arg>pull</arg>
                <arg>-a</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew">
                <arg>-PbahmniRelease=#{rpm_version}</arg>
                <arg>:bahmni-transifex:clean</arg>
                <arg>:bahmni-transifex:buildRpm</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>transifex</resource>
            </resources>
            <artifacts>
              <artifact src="bahmni-transifex/build/distributions/*.rpm" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="CollectArtifactsStage">
        <jobs>
          <job name="publish-artifacts-to-yum-repo">
            <tasks>
              <fetchartifact pipeline="bahmni-transifex" stage="defaultStage" job="defaultJob" srcdir="distributions" dest="artifacts">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="artifacts">
                <arg>-c</arg>
                <arg>yes | sudo cp -f distributions/*.rpm /var/www/rpm/bahmni/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo createrepo --update /var/www/rpm/bahmni/</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yum-repo</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <templates>
    <pipeline name="Bahmni_MRS_Deploy">
      <stage name="deployStage">
        <approval type="manual" />
        <jobs>
          <job name="deployJob">
            <tasks>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="Package" job="package" srcfile="mrs_installer.sh">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo fuser -k 8080/tcp || :</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>-E</arg>
                <arg>sh</arg>
                <arg>mrs_installer.sh</arg>
                <arg>--target</arg>
                <arg>/packages/build</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>/bahmni_temp/logs/bahmni_deploy.log</arg>
                <arg>.</arg>
                <runif status="any" />
              </exec>
              <exec command="sudo">
                <arg>service</arg>
                <arg>tomcat</arg>
                <arg>start</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bahmni_deploy.log" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="OpenERP_Deploy">
      <stage name="deployStage">
        <approval type="manual" />
        <jobs>
          <job name="deployJob">
            <tasks>
              <fetchartifact pipeline="OpenERP_#{pipeline_name}" stage="package" job="package" srcfile="erp_installer.sh">
                <runif status="passed" />
              </fetchartifact>
              <exec command="sudo">
                <arg>-E</arg>
                <arg>sh</arg>
                <arg>erp_installer.sh</arg>
                <arg>--target</arg>
                <arg>/packages/build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="OpenElis_Deploy">
      <stage name="deployStage">
        <approval type="manual" />
        <jobs>
          <job name="deployJob">
            <tasks>
              <fetchartifact pipeline="OpenElis_#{pipeline_name}" stage="Package" job="package" srcfile="elis_installer.sh">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo fuser -k 8080/tcp || :</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>-E</arg>
                <arg>sh</arg>
                <arg>elis_installer.sh</arg>
                <arg>--target</arg>
                <arg>/packages/build</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>service</arg>
                <arg>tomcat</arg>
                <arg>start</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Reports_Deploy">
      <stage name="deployStage">
        <approval type="manual" />
        <jobs>
          <job name="deployJob">
            <tasks>
              <fetchartifact pipeline="Build_jss_reports_#{pipeline_name}" stage="Package" job="package" srcfile="#{implementation_name}_reports_installer.sh">
                <runif status="passed" />
              </fetchartifact>
              <exec command="sudo">
                <arg>-E</arg>
                <arg>sh</arg>
                <arg>#{implementation_name}_reports_installer.sh</arg>
                <arg>--target</arg>
                <arg>/packages/build</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="ReferenceData_Deploy">
      <stage name="deployStage">
        <approval type="manual" />
        <jobs>
          <job name="deployJob">
            <tasks>
              <fetchartifact pipeline="ReferenceData_#{pipeline_name}" stage="Build" job="build" srcdir="deployables">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>cp -r deployables/* /packages/build</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo fuser -k 8080/tcp || :</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo" workingdir="bahmni-environment">
                <arg>-E</arg>
                <arg>scripts/deploy-module.sh</arg>
                <arg>reference_data</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>service</arg>
                <arg>tomcat</arg>
                <arg>start</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="ReferenceData_Build">
      <stage name="Build" artifactCleanupProhibited="true">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>deployables</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>deployables</arg>
                <runif status="passed" />
              </exec>
              <exec command="sh" workingdir="reference-data">
                <arg>scripts/tearDownDB.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="sh" workingdir="reference-data">
                <arg>scripts/setupDB.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/home/jss/apache-maven-3.0.5/bin/mvn" workingdir="reference-data">
                <arg>clean</arg>
                <arg>install</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
              <exec command="zip" workingdir="reference-data">
                <arg>-r</arg>
                <arg>../deployables/reference-data-scripts.zip</arg>
                <arg>scripts</arg>
                <runif status="passed" />
              </exec>
              <exec command="curl">
                <arg>-o</arg>
                <arg>go_revisions.sh</arg>
                <arg>https://raw.githubusercontent.com/Bahmni/bahmni-environment/master/scripts/ci/go_revisions.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="chmod">
                <arg>a+x</arg>
                <arg>go_revisions.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>./go_revisions.sh &gt; deployables/bahmni_reference_data_revision.txt</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
            <artifacts>
              <artifact src="deployables" />
              <artifact src="reference-data/target/*.war" dest="deployables" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Database_Backup">
      <stage name="backup" artifactCleanupProhibited="true">
        <approval type="manual" />
        <jobs>
          <job name="backup">
            <tasks>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>backup</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>bahmni-environment/scripts/backup-mysql.sh</arg>
                <arg>password</arg>
                <arg>backup</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>bahmni-environment/scripts/backup-pgsql.sh</arg>
                <arg>backup</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="backup" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Anonymise">
      <stage name="defaultStage">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="sh" workingdir="bahmni-environment">
                <arg>scripts/bahmni-tools/anonymise-lite/anonymise.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Bahmni_artefacts">
      <stage name="CollectArtefactsStage" cleanWorkingDir="true">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="Package" job="package" srcfile="mrs_installer.sh" dest="deployables">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="OpenERP_#{pipeline_name}" stage="package" job="package" srcfile="erp_installer.sh" dest="deployables">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="OpenElis_#{pipeline_name}" stage="Package" job="package" srcfile="elis_installer.sh" dest="deployables">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_Reports_#{pipeline_name}" stage="Package" job="package" srcfile="bahmni_reports_installer.sh" dest="deployables">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_pacs_#{pipeline_name}" stage="Package" job="package" srcfile="bahmni_pacs_installer.sh" dest="deployables">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_environment_#{pipeline_name}" stage="buildStage" job="buildEnvironment" srcfile="bahmni-environment.zip">
                <runif status="passed" />
              </fetchartifact>
              <exec command="unzip">
                <arg>-qo</arg>
                <arg>bahmni-environment.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>bahmni-environment/scripts/ci/bahmni_deploy.sh</arg>
                <arg>deployables</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>bahmni-environment/scripts/ci/create_bahmni_installer.sh</arg>
                <arg>deployables</arg>
                <arg>bahmni_installer</arg>
                <arg>"Bahmni Installer"</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="installer" />
              <artifact src="deployables" />
            </artifacts>
          </job>
          <job name="collect-rpms">
            <tasks>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="Package" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="OpenERP_#{pipeline_name}" stage="package" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="OpenElis_#{pipeline_name}" stage="Package" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_Reports_#{pipeline_name}" stage="Package" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_pacs_#{pipeline_name}" stage="Package" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_event_log_service_#{pipeline_name}" stage="Package" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
            </tasks>
            <artifacts>
              <artifact src="rpms" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="PackageInstaller" cleanWorkingDir="true">
        <jobs>
          <job name="package-rpm">
            <tasks>
              <fetchartifact pipeline="Bahmni_artifacts_#{pipeline_name}" stage="CollectArtefactsStage" job="collect-rpms" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <exec command="sudo" workingdir="bahmni-playbooks">
                <arg>ansible-playbook</arg>
                <arg>--syntax-check</arg>
                <arg>all.yml</arg>
                <arg>-i</arg>
                <arg>local</arg>
                <runif status="passed" />
              </exec>
              <exec command="zip">
                <arg>-r</arg>
                <arg>bahmni-playbooks.zip</arg>
                <arg>bahmni-playbooks</arg>
                <arg>--exclude=*.git*</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>bahmni-playbooks.zip</arg>
                <arg>bahmni-package/bahmni-installer/resources</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>bahmni-package/bahmni-installer/scripts/generate-bahmni-version.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>rpm_versions.yml</arg>
                <arg>bahmni-package/bahmni-installer/resources</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew" workingdir="bahmni-package">
                <arg>-PbahmniRelease=#{rpm_version}</arg>
                <arg>:bahmni-installer:clean</arg>
                <arg>:bahmni-installer:buildRpm</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>ANSIBLE</resource>
            </resources>
            <artifacts>
              <artifact src="bahmni-package/bahmni-installer/build/distributions/bahmni-installer-*.rpm" dest="rpms" />
              <artifact src="rpm_versions.yml" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="Publish">
        <jobs>
          <job name="publish-artifacts-to-yum-repo">
            <tasks>
              <fetchartifact pipeline="Bahmni_Artifacts_#{pipeline_name}" stage="CollectArtefactsStage" job="collect-rpms" srcdir="rpms" dest="artifacts">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_artifacts_#{pipeline_name}" stage="PackageInstaller" job="package-rpm" srcdir="rpms" dest="artifacts">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="artifacts">
                <arg>-c</arg>
                <arg>yes | sudo cp -f rpms/*.rpm /var/www/rpm/bahmni/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo createrepo --update /var/www/rpm/bahmni/</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yum-repo</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Bahmni_Artifacts_Ansible">
      <stage name="CollectArtefactsStage" cleanWorkingDir="true">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>echo ""</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
          <job name="collect-rpms">
            <tasks>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="Package" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="Package" job="package-rpm" srcfile="bahmni_openmrs_revision.json" dest="bahmni_revisions">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="OpenERP_#{pipeline_name}" stage="package" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="OpenERP_#{pipeline_name}" stage="Package" job="package-rpm" srcfile="bahmni_openerp_revision.json" dest="bahmni_revisions">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="OpenElis_#{pipeline_name}" stage="Package" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="OpenElis_#{pipeline_name}" stage="Package" job="package-rpm" srcfile="bahmni_openelis_revision.json" dest="bahmni_revisions">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_Reports_#{pipeline_name}" stage="Package" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_pacs_#{pipeline_name}" stage="Package" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_event_log_service_#{pipeline_name}" stage="Package" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
            </tasks>
            <artifacts>
              <artifact src="rpms" />
              <artifact src="bahmni_revisions" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="PackageInstaller" cleanWorkingDir="true">
        <jobs>
          <job name="package-rpm">
            <tasks>
              <fetchartifact pipeline="Bahmni_artifacts_#{pipeline_name}" stage="CollectArtefactsStage" job="collect-rpms" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <exec command="sudo" workingdir="bahmni-playbooks">
                <arg>ansible-playbook</arg>
                <arg>--syntax-check</arg>
                <arg>all.yml</arg>
                <arg>concat-config.yml</arg>
                <arg>db-backup.yml</arg>
                <arg>db-restore.yml</arg>
                <arg>mysql-replication.yml</arg>
                <arg>postgres-replication.yml</arg>
                <arg>-i</arg>
                <arg>local</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_artifacts_#{pipeline_name}" stage="CollectArtefactsStage" job="collect-rpms" srcdir="bahmni_revisions">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash">
                <arg>-c</arg>
                <arg>mv bahmni_revisions/*.json bahmni-playbooks/roles/httpd/files/</arg>
                <runif status="passed" />
              </exec>
              <exec command="zip">
                <arg>-r</arg>
                <arg>bahmni-playbooks.zip</arg>
                <arg>bahmni-playbooks</arg>
                <arg>--exclude=*.git*</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>bahmni-playbooks.zip</arg>
                <arg>bahmni-package/bahmni-installer/resources</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>bahmni-package/bahmni-installer/scripts/generate-bahmni-version.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>rpm_versions.yml</arg>
                <arg>bahmni-package/bahmni-installer/resources</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew" workingdir="bahmni-package">
                <arg>-PbahmniRelease=#{rpm_version}</arg>
                <arg>:bahmni-installer:clean</arg>
                <arg>:bahmni-installer:buildRpm</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>ANSIBLE</resource>
            </resources>
            <artifacts>
              <artifact src="bahmni-package/bahmni-installer/build/distributions/bahmni-installer-*.rpm" dest="rpms" />
              <artifact src="rpm_versions.yml" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="Publish">
        <jobs>
          <job name="publish-artifacts-to-yum-repo">
            <tasks>
              <fetchartifact pipeline="Bahmni_Artifacts_#{pipeline_name}" stage="CollectArtefactsStage" job="collect-rpms" srcdir="rpms" dest="artifacts">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_artifacts_#{pipeline_name}" stage="PackageInstaller" job="package-rpm" srcdir="rpms" dest="artifacts">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="artifacts">
                <arg>-c</arg>
                <arg>yes | sudo cp -f rpms/*.rpm /var/www/rpm/bahmni/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo createrepo --update /var/www/rpm/bahmni/</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yum-repo</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Bahmni_environment">
      <stage name="buildStage">
        <jobs>
          <job name="buildEnvironment">
            <tasks>
              <exec command="sh" workingdir="bahmni-environment">
                <arg>scripts/validate-manifests.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm">
                <arg>-f</arg>
                <arg>bahmni-environment.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="zip">
                <arg>-r</arg>
                <arg>bahmni-environment.zip</arg>
                <arg>bahmni-environment</arg>
                <arg>--exclude=*.git*</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bahmni-environment.zip" />
              <artifact src="bahmni-environment/scripts/ci/extract_artifacts.sh" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="All_Deploy">
      <stage name="defaultStage" cleanWorkingDir="true">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>installer</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_artifacts_#{pipeline_name}" stage="CollectArtefactsStage" job="defaultJob" srcdir="installer">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>cp installer/bahmni_installer_*.sh bahmni_installer.sh</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Build_#{implementation_name}_config_#{pipeline_name}" stage="Package" job="package" srcdir="installer">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>cp installer/#{implementation_name}_config_installer_*.sh #{implementation_name}_config_installer.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="wget">
                <arg>https://raw.githubusercontent.com/Bahmni/bahmni-environment/master/scripts/ci/all_deploy_tasks.sh</arg>
                <arg>--no-check-certificate</arg>
                <arg>-O</arg>
                <arg>all_deploy_tasks.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>/home/${FACTER_bahmni_user_name}/apache-tomcat-8.0.12/temp/*</arg>
                <arg>/home/${FACTER_bahmni_user_name}/apache-tomcat-8.0.12/work/*</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>-E</arg>
                <arg>sh</arg>
                <arg>all_deploy_tasks.sh</arg>
                <arg>#{implementation_name}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bahmni_deploy.log" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Config_Deploy">
      <stage name="deployStage">
        <approval type="manual" />
        <jobs>
          <job name="deployJob">
            <tasks>
              <fetchartifact pipeline="Build_#{implementation_name}_config_#{pipeline_name}" stage="BuildStage" job="Build" srcfile="#{implementation_name}_config.zip" dest="deployables">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo cp -r deployables/* /packages/build</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo" workingdir="bahmni-environment">
                <arg>-E</arg>
                <arg>scripts/deploy-module.sh</arg>
                <arg>implementation_config</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>/bahmni_temp/logs/bahmni_deploy.log</arg>
                <arg>.</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bahmni_deploy.log" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Bahmni_MRS">
      <stage name="BuildStage" cleanWorkingDir="true">
        <jobs>
          <job name="BahmniCore">
            <tasks>
              <fetchartifact pipeline="Bahmni_environment_#{pipeline_name}" stage="buildStage" job="buildEnvironment" srcfile="bahmni-environment.zip">
                <runif status="passed" />
              </fetchartifact>
              <exec command="unzip">
                <arg>-qo</arg>
                <arg>bahmni-environment.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>bahmni-environment/scripts/ci/pre_build_tasks.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="bahmnicore">
                <arg>clean</arg>
                <arg>deploy</arg>
                <arg>-T2</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
            <artifacts>
              <artifact src="bahmnicore/bahmnicore-omod/target/*.omod" dest="bahmnicoreartifacts" />
              <artifact src="bahmnicore/admin/target/site/jacoco" dest="coverage/admin" />
              <artifact src="bahmnicore/bahmnicore-api/target/site/jacoco" dest="coverage/bahmnicore-api" />
              <artifact src="bahmnicore/bahmni-mapping/target/site/jacoco" dest="coverage/bahmni-mapping" />
              <artifact src="bahmnicore/openmrs-elis-atomfeed-client-omod/target/site/jacoco" dest="coverage/openmrs-elis-atomfeed-client-omod" />
              <artifact src="bahmnicore/bahmnicore-ui/target/site/jacoco" dest="coverage/bahmnicore-ui" />
              <artifact src="bahmnicore/bahmnicore-omod/target/site/jacoco" dest="coverage/bahmnicore-omod" />
              <artifact src="bahmnicore/bahmni-emr-api/target/site/jacoco" dest="coverage/bahmni-emr-api" />
              <artifact src="bahmnicore/obs-relation/target/site/jacoco" dest="coverage/obs-relation" />
              <artifact src="bahmnicore/reference-data/api/target/site/jacoco" dest="coverage/reference-data-api" />
              <artifact src="bahmnicore/reference-data/omod/target/site/jacoco" dest="coverage/reference-data-omod" />
            </artifacts>
          </job>
          <job name="BahmniApps">
            <tasks>
              <exec command="npm" workingdir="openmrs-module-bahmniapps/ui">
                <arg>cache</arg>
                <arg>clean</arg>
                <runif status="passed" />
              </exec>
              <exec command="bower" workingdir="openmrs-module-bahmniapps/ui">
                <arg>cache</arg>
                <arg>clean</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="openmrs-module-bahmniapps/ui">
                <arg>--login</arg>
                <arg>scripts/package.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>UI</resource>
            </resources>
            <artifacts>
              <artifact src="openmrs-module-bahmniapps/ui/target/*.zip" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="BuildDistroStage">
        <jobs>
          <job name="BahmniDistro">
            <tasks>
              <fetchartifact pipeline="Bahmni_environment_#{pipeline_name}" stage="buildStage" job="buildEnvironment" srcfile="bahmni-environment.zip">
                <runif status="passed" />
              </fetchartifact>
              <exec command="unzip">
                <arg>-qo</arg>
                <arg>bahmni-environment.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>bahmni-environment/scripts/ci/pre_build_tasks.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="openmrs-distro-bahmni">
                <arg>clean</arg>
                <arg>install</arg>
                <arg>-T2</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
            <artifacts>
              <artifact src="openmrs-distro-bahmni/distro/target/distro" dest="openmrs-distro-bahmni-artifacts" />
              <artifact src="openmrs-distro-bahmni/distro/target/distro-*.zip" dest="openmrs-distro-bahmni-artifacts" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="FunctionalTestStage">
        <environmentvariables>
          <variable name="FACTER_bahmni_user_name">
            <value>jss</value>
          </variable>
          <variable name="FACTER_implementation_name">
            <value>default</value>
          </variable>
          <variable name="TEST_ENV">
            <value>ci</value>
          </variable>
          <variable name="FACTER_deploy_bahmni_bacteriology">
            <value>true</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="FunctionalTests">
            <environmentvariables>
              <variable name="TEST_ENV">
                <value>ci</value>
              </variable>
              <variable name="FACTER_bahmni_active_machine_ip">
                <value>127.0.0.1</value>
              </variable>
              <variable name="FACTER_deploy_bahmni_appointments">
                <value>false</value>
              </variable>
              <variable name="PARALLEL_INSTANCES">
                <value>1</value>
              </variable>
              <variable name="FACTER_deploy_bahmni_openerp">
                <value>true</value>
              </variable>
              <variable name="LC_CTYPE">
                <value>en_US</value>
              </variable>
              <variable name="LANGUAGE">
                <value>en_US</value>
              </variable>
              <variable name="FACTER_deploy_bahmni_bacteriology">
                <value>true</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>deployables</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>deployables/ui-modules</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>emr-functional-tests/screenshots</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>emr-functional-tests/screenshots</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="ClientSideLogging" stage="defaultStage" job="Nothing" srcdir="client_side_logging" dest="deployables">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="BuildDistroStage" job="BahmniDistro" srcfile="openmrs-distro-bahmni-artifacts/distro-#{bahmni_version}-distro.zip" dest="deployables">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="BuildStage" job="BahmniApps" srcfile="bahmniapps.zip" dest="deployables">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_environment_#{pipeline_name}" stage="buildStage" job="buildEnvironment" srcdir="bahmni-environment">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="default-config">
                <arg>--login</arg>
                <arg>scripts/package.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>default-config/target/default_config.zip</arg>
                <arg>deployables/</arg>
                <runif status="passed" />
              </exec>
              <exec command="chmod">
                <arg>a+x</arg>
                <arg>bahmni-environment/scripts/ci/bahmni_revision_log.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>./bahmni-environment/scripts/ci/bahmni_revision_log.sh &gt; deployables/bahmni_openmrs_revision.txt</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>cp ./bahmni-environment/home/index.html deployables/index.html</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo rm -rf /packages/build/* &amp;&amp; cp -r deployables/* /packages/build</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo fuser -k 8080/tcp || :</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>nohup sudo service openerp stop &gt; /dev/null 2&gt;&amp;1 &amp;</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo emr-functional-tests/scripts/setup-database.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>-E</arg>
                <arg>/bin/bash</arg>
                <arg>--login</arg>
                <arg>bahmni-environment/scripts/deploy-module.sh</arg>
                <arg>bahmni_openmrs</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>-E</arg>
                <arg>/bin/bash</arg>
                <arg>--login</arg>
                <arg>bahmni-environment/scripts/deploy-module.sh</arg>
                <arg>implementation_config::openmrs</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>/bahmni_temp/logs/bahmni_deploy.log</arg>
                <arg>.</arg>
                <runif status="any" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo rm -rf /home/jss/apache-tomcat-8.0.12/temp/* /home/jss/apache-tomcat-8.0.12/work/*</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>service</arg>
                <arg>tomcat</arg>
                <arg>start</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>nohup sudo service openerp start &gt; /dev/null 2&gt;&amp;1 &amp;</arg>
                <runif status="passed" />
              </exec>
              <exec command="sleep">
                <arg>4m</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="emr-functional-tests">
                <arg>--login</arg>
                <arg>-c</arg>
                <arg>scripts/run.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>EMRFT</resource>
            </resources>
            <artifacts>
              <artifact src="bahmni_deploy.log" />
              <artifact src="deployables" />
              <test src="emr-functional-tests/spec-results" />
              <test src="emr-functional-tests/screenshots" />
            </artifacts>
          </job>
          <job name="BahmniCoreIT">
            <environmentvariables>
              <variable name="MAVEN_OPTS">
                <value>-XX:MaxPermSize=256m -Xmx4g</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="mvn" workingdir="bahmnicore">
                <arg>clean</arg>
                <arg>install</arg>
                <arg>-PIT</arg>
                <arg>-T2</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="Package" cleanWorkingDir="true">
        <jobs>
          <job name="package">
            <tasks>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="FunctionalTestStage" job="FunctionalTests" srcdir="deployables">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_environment_#{pipeline_name}" stage="buildStage" job="buildEnvironment" srcfile="bahmni-environment.zip">
                <runif status="passed" />
              </fetchartifact>
              <exec command="cp">
                <arg>bahmni-environment.zip</arg>
                <arg>deployables/</arg>
                <runif status="passed" />
              </exec>
              <exec command="unzip">
                <arg>-qo</arg>
                <arg>bahmni-environment.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>bahmni-environment/scripts/ci/create_module_installer.sh</arg>
                <arg>deployables</arg>
                <arg>mrs_installer.sh</arg>
                <arg>"MRS Installer"</arg>
                <arg>bahmni_openmrs</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="mrs_installer.sh" />
            </artifacts>
          </job>
          <job name="package-rpm">
            <tasks>
              <exec command="./gradlew" workingdir="bahmni_package">
                <arg>build</arg>
                <arg>--refresh-dependencies</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew" workingdir="bahmni_package">
                <arg>-PbahmniRelease=0</arg>
                <arg>clean</arg>
                <arg>:openmrs:buildRpm</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_environment_#{pipeline_name}" stage="buildStage" job="buildEnvironment" srcfile="bahmni-environment.zip" dest="bahmni_package/bahmni-emr/resources">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="BuildDistroStage" job="BahmniDistro" srcfile="openmrs-distro-bahmni-artifacts/distro-#{bahmni_version}-distro.zip" dest="bahmni_package/bahmni-emr/resources">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="FunctionalTestStage" job="FunctionalTests" srcfile="deployables/bahmniapps.zip" dest="bahmni_package/bahmni-web/resources">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="FunctionalTestStage" job="FunctionalTests" srcfile="deployables/default_config.zip" dest="bahmni_package/bahmni-web/resources">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="FunctionalTestStage" job="FunctionalTests" srcdir="deployables/client_side_logging" dest="bahmni_package/bahmni-web/resources">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="BuildDistroStage" job="BahmniDistro" srcfile="openmrs-distro-bahmni-artifacts/distro/openelis-atomfeed-client-#{bahmni_version}.omod" dest="bahmni_package/bahmni-lab-connect/resources">
                <runif status="passed" />
              </fetchartifact>
              <exec command="./gradlew" workingdir="bahmni_package">
                <arg>-PbahmniRelease=#{rpm_version}</arg>
                <arg>:bahmni-emr:clean</arg>
                <arg>:bahmni-emr:buildRpm</arg>
                <arg>:bahmni-web:clean</arg>
                <arg>:bahmni-web:buildRpm</arg>
                <arg>:bahmni-lab-connect:clean</arg>
                <arg>:bahmni-lab-connect:buildRpm</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bahmni_package/openmrs/build/distributions/openmrs-*.rpm" dest="rpms" />
              <artifact src="bahmni_package/bahmni-emr/build/distributions/bahmni-emr-*.rpm" dest="rpms" />
              <artifact src="bahmni_package/bahmni-web/build/distributions/bahmni-web-*.rpm" dest="rpms" />
              <artifact src="bahmni_package/bahmni-lab-connect/build/distributions/bahmni-lab-connect-*.rpm" dest="rpms" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Bahmni_MRS_Ansible">
      <stage name="BuildStage">
        <jobs>
          <job name="BahmniCore">
            <tasks>
              <exec command="curl">
                <arg>-o</arg>
                <arg>pre_build_tasks.sh</arg>
                <arg>https://raw.githubusercontent.com/Bahmni/bahmni-scripts/master/ci/pre_build_tasks.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>pre_build_tasks.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="bahmnicore">
                <arg>clean</arg>
                <arg>deploy</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
            <artifacts>
              <artifact src="bahmnicore/bahmnicore-omod/target/*.omod" dest="bahmnicoreartifacts" />
              <artifact src="bahmnicore/admin/target/site/jacoco" dest="coverage/admin" />
              <artifact src="bahmnicore/bahmnicore-api/target/site/jacoco" dest="coverage/bahmnicore-api" />
              <artifact src="bahmnicore/bahmni-mapping/target/site/jacoco" dest="coverage/bahmni-mapping" />
              <artifact src="bahmnicore/openmrs-elis-atomfeed-client-omod/target/site/jacoco" dest="coverage/openmrs-elis-atomfeed-client-omod" />
              <artifact src="bahmnicore/bahmnicore-ui/target/site/jacoco" dest="coverage/bahmnicore-ui" />
              <artifact src="bahmnicore/bahmnicore-omod/target/site/jacoco" dest="coverage/bahmnicore-omod" />
              <artifact src="bahmnicore/bahmni-emr-api/target/site/jacoco" dest="coverage/bahmni-emr-api" />
              <artifact src="bahmnicore/obs-relation/target/site/jacoco" dest="coverage/obs-relation" />
              <artifact src="bahmnicore/reference-data/api/target/site/jacoco" dest="coverage/reference-data-api" />
              <artifact src="bahmnicore/reference-data/omod/target/site/jacoco" dest="coverage/reference-data-omod" />
            </artifacts>
          </job>
          <job name="BahmniApps">
            <tasks>
              <exec command="npm" workingdir="openmrs-module-bahmniapps/ui">
                <arg>cache</arg>
                <arg>clean</arg>
                <runif status="passed" />
              </exec>
              <exec command="bower" workingdir="openmrs-module-bahmniapps/ui">
                <arg>cache</arg>
                <arg>clean</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm" workingdir="openmrs-module-bahmniapps/ui">
                <arg>-rf</arg>
                <arg>coverage/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="openmrs-module-bahmniapps/ui">
                <arg>--login</arg>
                <arg>scripts/package.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>UI</resource>
            </resources>
            <artifacts>
              <artifact src="openmrs-module-bahmniapps/ui/target/*.zip" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="BuildDistroStage">
        <jobs>
          <job name="BahmniDistro">
            <tasks>
              <exec command="curl">
                <arg>-o</arg>
                <arg>pre_build_tasks.sh</arg>
                <arg>https://raw.githubusercontent.com/Bahmni/bahmni-scripts/master/ci/pre_build_tasks.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>pre_build_tasks.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="openmrs-distro-bahmni">
                <arg>clean</arg>
                <arg>install</arg>
                <arg>-T2</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
            <artifacts>
              <artifact src="openmrs-distro-bahmni/distro/target/distro" dest="openmrs-distro-bahmni-artifacts" />
              <artifact src="openmrs-distro-bahmni/distro/target/distro-*.zip" dest="openmrs-distro-bahmni-artifacts" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="Package" cleanWorkingDir="true">
        <jobs>
          <job name="package-rpm">
            <tasks>
              <fetchartifact pipeline="OpenMRS_#{pipeline_name}" stage="buildRPM" job="buildRPM" srcdir="rpms/">
                <runif status="passed" />
              </fetchartifact>
              <exec command="./gradlew" workingdir="bahmni_package">
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="BuildDistroStage" job="BahmniDistro" srcfile="openmrs-distro-bahmni-artifacts/distro-#{bahmni_version}-distro.zip" dest="bahmni_package/bahmni-emr/resources">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="BuildStage" job="BahmniApps" srcfile="bahmniapps.zip" dest="bahmni_package/bahmni-web/resources">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="default-config">
                <arg>--login</arg>
                <arg>scripts/package.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>default-config/target/default_config.zip</arg>
                <arg>bahmni_package/bahmni-web/resources/</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="ClientSideLogging" stage="defaultStage" job="Nothing" srcdir="client_side_logging" dest="bahmni_package/bahmni-web/resources">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="BuildDistroStage" job="BahmniDistro" srcfile="openmrs-distro-bahmni-artifacts/distro/openelis-atomfeed-client-#{bahmni_version}.omod" dest="bahmni_package/bahmni-lab-connect/resources">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="bahmni_package">
                <arg>-c</arg>
                <arg>./bahmni-web/test/bahmni_openmrs_revision.sh &gt; bahmni_openmrs_revision.json</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew" workingdir="bahmni_package">
                <arg>-PbahmniRelease=#{rpm_version}</arg>
                <arg>:bahmni-emr:clean</arg>
                <arg>:bahmni-emr:buildRpm</arg>
                <arg>:bahmni-web:clean</arg>
                <arg>:bahmni-web:buildRpm</arg>
                <arg>:bahmni-lab-connect:clean</arg>
                <arg>:bahmni-lab-connect:buildRpm</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bahmni_package/bahmni-emr/build/distributions/bahmni-emr-*.rpm" dest="rpms" />
              <artifact src="bahmni_package/bahmni-web/build/distributions/bahmni-web-*.rpm" dest="rpms" />
              <artifact src="bahmni_package/bahmni-lab-connect/build/distributions/bahmni-lab-connect-*.rpm" dest="rpms" />
              <artifact src="rpms/bahmni-openmrs-*.rpm" dest="rpms" />
              <artifact src="bahmni_package/bahmni_openmrs_revision.json" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="FunctionalTestStage">
        <environmentvariables>
          <variable name="FACTER_bahmni_user_name">
            <value>jss</value>
          </variable>
          <variable name="FACTER_implementation_name">
            <value>default</value>
          </variable>
          <variable name="TEST_ENV">
            <value>ci</value>
          </variable>
          <variable name="FACTER_deploy_bahmni_bacteriology">
            <value>true</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="FunctionalTests">
            <environmentvariables>
              <variable name="TEST_ENV">
                <value>ci</value>
              </variable>
              <variable name="PARALLEL_INSTANCES">
                <value>1</value>
              </variable>
              <variable name="LC_CTYPE">
                <value>en_US</value>
              </variable>
              <variable name="LANGUAGE">
                <value>en_US</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>deployables</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>deployables/ui-modules</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>emr-functional-tests/screenshots</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>emr-functional-tests/screenshots</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="BuildDistroStage" job="BahmniDistro" srcfile="openmrs-distro-bahmni-artifacts/distro-#{bahmni_version}-distro.zip" dest="deployables">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo emr-functional-tests/scripts/drop_databases.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo yum remove -y bahmni-openmrs bahmni-emr bahmni-web</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>deployables/rpms</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="Package" job="package-rpm" srcdir="rpms" dest="deployables/downloaded_rpms">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="deployables/downloaded_rpms/rpms">
                <arg>-c</arg>
                <arg>sudo yum install -y bahmni-openmrs*.rpm</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="deployables/downloaded_rpms/rpms">
                <arg>-c</arg>
                <arg>sudo yum install -y bahmni-emr*.rpm</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="deployables/downloaded_rpms/rpms">
                <arg>-c</arg>
                <arg>sudo yum install -y bahmni-web*.rpm</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo service openmrs start</arg>
                <runif status="passed" />
              </exec>
              <exec command="sleep">
                <arg>4m</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="emr-functional-tests">
                <arg>--login</arg>
                <arg>-c</arg>
                <arg>scripts/run.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>ANSIBLE_EMRFT</resource>
            </resources>
            <artifacts>
              <artifact src="deployables" />
              <test src="emr-functional-tests/spec-results" />
              <test src="emr-functional-tests/screenshots" />
            </artifacts>
          </job>
          <job name="BahmniCoreIT">
            <environmentvariables>
              <variable name="MAVEN_OPTS">
                <value>-XX:MaxPermSize=256m -Xmx4g</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="mvn" workingdir="bahmnicore">
                <arg>clean</arg>
                <arg>install</arg>
                <arg>-PIT</arg>
                <arg>-T2</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="OpenERP">
      <stage name="runFunctionalTestsStage" cleanWorkingDir="true">
        <jobs>
          <job name="runFunctionalTestsJob">
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>deployables</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>deployables</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="openerp-modules">
                <arg>-c</arg>
                <arg>sudo cp -R ./* $OPENERP_LOCATION/openerp/addons/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="openerp-functional-tests">
                <arg>--login</arg>
                <arg>run.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="zip">
                <arg>-r</arg>
                <arg>deployables/openerp-modules.zip</arg>
                <arg>openerp-modules</arg>
                <arg>--exclude=*.git*</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>OPENERP</resource>
            </resources>
            <artifacts>
              <artifact src="deployables" />
            </artifacts>
          </job>
          <job name="openerp-atomfeed-service">
            <tasks>
              <exec command="mvn" workingdir="openerp-atomfeed-service">
                <arg>-U</arg>
                <arg>clean</arg>
                <arg>deploy</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>OPENERP</resource>
            </resources>
            <artifacts>
              <artifact src="openerp-atomfeed-service/openerp-atomfeed-service/target/*.war" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="package" cleanWorkingDir="true">
        <jobs>
          <job name="package-rpm">
            <tasks>
              <fetchartifact pipeline="OpenERP_#{pipeline_name}" stage="runFunctionalTestsStage" job="runFunctionalTestsJob" srcfile="deployables/openerp-modules.zip" dest="bahmni_package/bahmni-erp/resources">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="OpenERP_#{pipeline_name}" stage="runFunctionalTestsStage" job="openerp-atomfeed-service" srcfile="openerp-atomfeed-service.war" dest="bahmni_package/bahmni-erp-connect/resources">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="bahmni_package">
                <arg>-c</arg>
                <arg>./bahmni-erp/test/bahmni_openerp_revision.sh &gt; bahmni_openerp_revision.json</arg>
                <runif status="failed" />
                <runif status="passed" />
              </exec>
              <exec command="gunzip">
                <arg>emr-functional-tests/dbdump/openerp_backup.sql.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv">
                <arg>emr-functional-tests/dbdump/openerp_backup.sql</arg>
                <arg>bahmni_package/bahmni-erp/resources/openerp_demo_dump.sql</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew" workingdir="bahmni_package">
                <arg>-PbahmniRelease=#{rpm_version}</arg>
                <arg>:bahmni-erp:clean</arg>
                <arg>:bahmni-erp:buildRpm</arg>
                <arg>:bahmni-erp-connect:clean</arg>
                <arg>:bahmni-erp-connect:buildRpm</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bahmni_package/bahmni-erp/build/distributions/bahmni-erp-*.rpm" dest="rpms" />
              <artifact src="bahmni_package/bahmni-erp-connect/build/distributions/*.rpm" dest="rpms" />
              <artifact src="bahmni_package/bahmni_openerp_revision.json" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="OpenElis">
      <stage name="Build">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>deployables</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>deployables</arg>
                <runif status="passed" />
              </exec>
              <ant target="build" workingdir="OpenElis">
                <runif status="passed" />
              </ant>
              <exec command="cp">
                <arg>OpenElis/openelis/dist/openelis.war</arg>
                <arg>deployables</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>OpenElis/OpenElis.zip</arg>
                <arg>deployables</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
            <artifacts>
              <test src="OpenElis/junit" />
              <artifact src="deployables" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="Package" cleanWorkingDir="true">
        <jobs>
          <job name="package-rpm">
            <tasks>
              <fetchartifact pipeline="OpenElis_#{pipeline_name}" stage="Build" job="build" srcfile="deployables/openelis.war" dest="bahmni_package/bahmni-lab/resources">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="OpenElis_#{pipeline_name}" stage="Build" job="build" srcfile="deployables/OpenElis.zip" dest="bahmni_package/bahmni-lab/resources">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="bahmni_package">
                <arg>-c</arg>
                <arg>bahmni-lab/test/bahmni_openelis_revision.sh &gt; bahmni_openelis_revision.json</arg>
                <runif status="any" />
              </exec>
              <exec command="gunzip">
                <arg>emr-functional-tests/dbdump/openelis_backup.sql.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv">
                <arg>emr-functional-tests/dbdump/openelis_backup.sql</arg>
                <arg>bahmni_package/bahmni-lab/resources/openelis_demo_dump.sql</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew" workingdir="bahmni_package">
                <arg>-PbahmniRelease=#{rpm_version}</arg>
                <arg>:bahmni-lab:clean</arg>
                <arg>:bahmni-lab:buildRpm</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bahmni_package/bahmni-lab/build/distributions/bahmni-lab-*.rpm" dest="rpms" />
              <artifact src="bahmni_package/bahmni_openelis_revision.json" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Implementation_config">
      <stage name="BuildStage">
        <jobs>
          <job name="Build">
            <tasks>
              <exec command="/bin/bash" workingdir="#{implementation_name}-config">
                <arg>--login</arg>
                <arg>scripts/package.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="#{implementation_name}-config/target/#{implementation_name}_config.zip" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="Package" cleanWorkingDir="true">
        <jobs>
          <job name="package">
            <tasks>
              <fetchartifact pipeline="Build_#{implementation_name}_config_#{pipeline_name}" stage="BuildStage" job="Build" srcfile="#{implementation_name}_config.zip" dest="deployables">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/sh">
                <arg>-c</arg>
                <arg>mkdir -p installer</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>-c</arg>
                <arg>mv #{implementation_name}_config_installer.sh installer/#{implementation_name}_config_installer_${GO_PIPELINE_COUNTER}.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="installer" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Implementation_Report">
      <stage name="Package">
        <jobs>
          <job name="package">
            <tasks>
              <exec command="makeself.sh">
                <arg>#{implementation_name}-reports</arg>
                <arg>#{implementation_name}_reports_installer.sh</arg>
                <arg>"#{implementation_name} Reports Installer"</arg>
                <arg>./scripts/reports_installer.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="#{implementation_name}_reports_installer.sh" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Bahmni-Reports">
      <stage name="BuildStage" cleanWorkingDir="true">
        <jobs>
          <job name="Build-Bahmni-Reports">
            <tasks>
              <exec command="curl">
                <arg>-o</arg>
                <arg>pre_build_tasks.sh</arg>
                <arg>https://raw.githubusercontent.com/Bahmni/bahmni-scripts/master/ci/pre_build_tasks.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>pre_build_tasks.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="bahmni-reports">
                <arg>clean</arg>
                <arg>install</arg>
                <arg>-T2</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>reports</resource>
            </resources>
            <artifacts>
              <artifact src="bahmni-reports/target/bahmnireports.war" dest="deployables" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="Package">
        <jobs>
          <job name="package-rpm">
            <tasks>
              <fetchartifact pipeline="Bahmni_Reports_#{pipeline_name}" stage="BuildStage" job="Build-Bahmni-Reports" srcfile="deployables/bahmnireports.war" dest="bahmni_package/bahmni-reports/resources">
                <runif status="passed" />
              </fetchartifact>
              <exec command="./gradlew" workingdir="bahmni_package">
                <arg>-PbahmniRelease=#{rpm_version}</arg>
                <arg>:bahmni-reports:clean</arg>
                <arg>:bahmni-reports:buildRpm</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bahmni_package/bahmni-reports/build/distributions/*.rpm" dest="rpms" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Restore_Anonymized_Data_Dump">
      <stage name="defaultStage">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="bash">
                <arg>bahmni-environment/scripts/ci/pipeline-definitions/deploy_anonymised_data.sh</arg>
                <arg>#{implementation_name}</arg>
                <arg>#{aws_access_key}</arg>
                <arg>#{aws_secret_key}</arg>
                <runif status="passed" />
              </exec>
              <exec command="ls">
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>Anon_DB_Agent</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Create_Anonymized_Data_Dump">
      <stage name="defaultStage">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="bash">
                <arg>bahmni-environment/scripts/ci/pipeline-definitions/dumpAndAnonymise.sh</arg>
                <arg>#{mysql_password}</arg>
                <arg>#{implementation_name}</arg>
                <arg>#{aws_access_key}</arg>
                <arg>#{aws_secret_key}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>Anon_DB_Agent</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Bahmni_pacs">
      <stage name="Build" cleanWorkingDir="true">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="mvn" workingdir="pacs_integration">
                <arg>clean</arg>
                <arg>deploy</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
            <artifacts>
              <artifact src="pacs_integration/pacs-integration-webapp/target/pacs-integration.war" dest="deployables" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="Package">
        <jobs>
          <job name="package-rpm">
            <tasks>
              <fetchartifact pipeline="Bahmni_pacs_#{pipeline_name}" stage="Build" job="build" srcfile="deployables/pacs-integration.war" dest="bahmni_package/bahmni-pacs/resources/pacs-integration">
                <runif status="passed" />
              </fetchartifact>
              <exec command="./gradlew" workingdir="bahmni_package">
                <arg>-PbahmniRelease=#{rpm_version}</arg>
                <arg>:bahmni-pacs:clean</arg>
                <arg>:bahmni-pacs:dist</arg>
                <arg>:bahmni-pacs:dist_dcm4chee</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bahmni_package/bahmni-pacs/build/distributions/*.rpm" dest="rpms" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Release">
      <stage name="fetchArtifacts">
        <approval type="manual" />
        <jobs>
          <job name="fetch">
            <tasks>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo rm -rf release_#{bahmni_release_version}/*</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_artifacts_#{artifact_source}" stage="CollectArtefactsStage" job="defaultJob" srcdir="installer" dest="release_#{bahmni_release_version}">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Build_default_config_#{artifact_source}" stage="Package" job="package" srcdir="installer" dest="release_#{bahmni_release_version}">
                <runif status="passed" />
              </fetchartifact>
              <exec command="mv" workingdir="release_#{bahmni_release_version}">
                <arg>Bahmni_artifacts_#{artifact_source}_CollectArtefactsStage_defaultJob_md5.checksum</arg>
                <arg>installer/bahmni_installer_md5.checksum</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv" workingdir="release_#{bahmni_release_version}">
                <arg>Build_default_config_#{artifact_source}_Package_package_md5.checksum</arg>
                <arg>installer/default_config_installer_md5.checksum</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>dropbox</resource>
            </resources>
            <artifacts>
              <artifact src="release_#{bahmni_release_version}/installer/default_config_installer_*.sh" dest="installer" />
              <artifact src="release_#{bahmni_release_version}/installer/bahmni_installer_*.sh" dest="installer" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="uploadArtifacts" fetchMaterials="false">
        <jobs>
          <job name="upload">
            <tasks>
              <fetchartifact pipeline="Bahmni_environment_#{artifact_source}" stage="buildStage" job="buildEnvironment" srcfile="bahmni-environment.zip">
                <runif status="passed" />
              </fetchartifact>
              <exec command="unzip">
                <arg>-qo</arg>
                <arg>bahmni-environment.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>bahmni-environment/scripts/ci/publish_artifacts.sh</arg>
                <arg>/root/Dropbox/release-artifacts</arg>
                <arg>#{bahmni_release_version}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>dropbox</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Bahmni_Deploy_Demo">
      <stage name="apply_db_dump">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/bin/sh">
                <arg>emr-functional-tests/scripts/setup-demo-data.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="event_log_service">
      <stage name="BuildStage">
        <jobs>
          <job name="build-event-log-service">
            <tasks>
              <fetchartifact pipeline="Bahmni_environment_#{pipeline_name}" stage="buildStage" job="buildEnvironment" srcfile="bahmni-environment.zip">
                <runif status="passed" />
              </fetchartifact>
              <exec command="unzip">
                <arg>-qo</arg>
                <arg>bahmni-environment.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>bahmni-environment/scripts/ci/pre_build_tasks.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn" workingdir="event-log-service">
                <arg>clean</arg>
                <arg>install</arg>
                <arg>-U</arg>
                <arg>-PIT</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
            <artifacts>
              <artifact src="event-log-service/event-log-service-webapp/target/event-log-service-webapp.war" dest="deployables" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="Package">
        <jobs>
          <job name="package-rpm">
            <tasks>
              <fetchartifact pipeline="Bahmni_event_log_service_#{pipeline_name}" stage="BuildStage" job="build-event-log-service" srcfile="deployables/event-log-service-webapp.war" dest="bahmni_package/bahmni-event-log-service/resources">
                <runif status="passed" />
              </fetchartifact>
              <exec command="./gradlew" workingdir="bahmni_package">
                <arg>-PbahmniRelease=#{rpm_version}</arg>
                <arg>:bahmni-event-log-service:clean</arg>
                <arg>:bahmni-event-log-service:buildRpm</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bahmni_package/bahmni-event-log-service/build/distributions/bahmni-event-log-service-*.rpm" dest="rpms" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Release_To_Public">
      <stage name="deploytobintray" cleanWorkingDir="true">
        <approval type="manual" />
        <jobs>
          <job name="bintraydeploy">
            <tasks>
              <fetchartifact pipeline="Bahmni_artifacts_#{pipeline_name}" stage="CollectArtefactsStage" job="collect-rpms" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="Bahmni_artifacts_#{pipeline_name}" stage="PackageInstaller" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>yes | sudo cp -f rpms/*.rpm /var/www/rpm/bahmni-release/</arg>
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo createrepo --update /var/www/rpm/bahmni-release/</arg>
                <runif status="passed" />
              </exec>
              <exec command="python">
                <arg>utilities/bintray_uploader.py</arg>
                <arg>rpms</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yum-repo</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="atlaspush">
        <approval type="manual" />
        <jobs>
          <job name="pushtoatlas">
            <tasks>
              <exec command="python" workingdir="bahmni-vagrant">
                <arg>render_template.py</arg>
                <arg>#{bahmni_version}</arg>
                <runif status="passed" />
              </exec>
              <exec command="atlas-packer" workingdir="bahmni-vagrant/packer">
                <arg>push</arg>
                <arg>-name</arg>
                <arg>bahmni-team/bahmni</arg>
                <arg>template_rendered.json</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yum-repo</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Bahmni_deploy_ansible">
      <stage name="defaultStage" cleanWorkingDir="true">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <environmentvariables>
              <variable name="IMPL_NAME">
                <value>endtb</value>
              </variable>
              <variable name="ANSIBLE_HOST_KEY_CHECKING">
                <value>False</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="Bahmni_artifacts_#{release_version}" stage="PackageInstaller" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>sudo bahmni-tw-playbooks/scripts/deploy.sh #{env_name} #{implementation_name} #{db_dump_required} #{db_dump_url_location}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>ANSIBLE_INSTALL</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Bahmni_Offline">
      <stage name="Build">
        <jobs>
          <job name="build">
            <environmentvariables>
              <variable name="ANDROID_HOME">
                <value>/var/go/android-sdk-linux/</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="cordova" workingdir="bahmni-offline/android">
                <arg>platform</arg>
                <arg>remove</arg>
                <arg>android</arg>
                <runif status="passed" />
              </exec>
              <exec command="cordova" workingdir="bahmni-offline/android">
                <arg>platform</arg>
                <arg>add</arg>
                <arg>android</arg>
                <runif status="passed" />
              </exec>
              <exec command="git" workingdir="bahmni-offline/android">
                <arg>checkout</arg>
                <arg>.</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm" workingdir="bahmni-offline/android/www">
                <arg>-rf</arg>
                <arg>app/</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir" workingdir="bahmni-offline/android/www/">
                <arg>app</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="BuildStage" job="BahmniApps" srcfile="bahmniapps_android.zip" dest="bahmni-offline/android/www/app/">
                <runif status="passed" />
              </fetchartifact>
              <exec command="unzip" workingdir="bahmni-offline/android/www/app/">
                <arg>bahmniapps_android.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm" workingdir="bahmni-offline/android/www/app/">
                <arg>-rf</arg>
                <arg>admin</arg>
                <arg>adt</arg>
                <arg>dhis</arg>
                <arg>document-upload</arg>
                <arg>orders</arg>
                <arg>reports</arg>
                <arg>bahmniapps_android.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm" workingdir="bahmni-offline/android/www">
                <arg>-rf</arg>
                <arg>bahmni_config</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir" workingdir="bahmni-offline/android/www/">
                <arg>bahmni_config</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="default-config">
                <arg>--login</arg>
                <arg>scripts/package.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>default-config/target/default_config.zip</arg>
                <arg>bahmni-offline/android/www/bahmni_config/default_config.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="unzip" workingdir="bahmni-offline/android/www/bahmni_config/">
                <arg>default_config.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm" workingdir="bahmni-offline/android/www/bahmni_config/openmrs/">
                <arg>-rf</arg>
                <arg>apps</arg>
                <arg>aqs</arg>
                <arg>beanshell</arg>
                <arg>encounterModifier</arg>
                <arg>migrations</arg>
                <arg>obscalculator</arg>
                <arg>ordertemplates</arg>
                <arg>templates</arg>
                <arg>patientMatchingAlgorithm</arg>
                <arg>treatmentRegimenExtension</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm" workingdir="bahmni-offline/android/www/bahmni_config/">
                <arg>-rf</arg>
                <arg>openelis</arg>
                <arg>default_config.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp" workingdir="bahmni-offline/android">
                <arg>/bahmni-apk-signing/release-signing.properties</arg>
                <arg>platforms/android/</arg>
                <runif status="passed" />
              </exec>
              <exec command="cordova" workingdir="bahmni-offline/android">
                <arg>build</arg>
                <arg>android</arg>
                <arg>--release</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm" workingdir="bahmni-offline/chrome/">
                <arg>-rf</arg>
                <arg>app/</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir" workingdir="bahmni-offline/chrome/">
                <arg>app</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_MRS_#{pipeline_name}" stage="BuildStage" job="BahmniApps" srcfile="bahmniapps_chrome.zip" dest="bahmni-offline/chrome/app/">
                <runif status="passed" />
              </fetchartifact>
              <exec command="unzip" workingdir="bahmni-offline/chrome/app/">
                <arg>bahmniapps_chrome.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm" workingdir="bahmni-offline/chrome/app/">
                <arg>-rf</arg>
                <arg>admin</arg>
                <arg>adt</arg>
                <arg>dhis</arg>
                <arg>document-upload</arg>
                <arg>orders</arg>
                <arg>reports</arg>
                <arg>bahmniapps_chrome.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp" workingdir="bahmni-offline/chrome">
                <arg>-rf</arg>
                <arg>../android/www/bahmni_config</arg>
                <arg>.</arg>
                <runif status="passed" />
              </exec>
              <exec command="tar">
                <arg>-zcvf</arg>
                <arg>bahmni.tar.gz</arg>
                <arg>bahmni-offline/chrome/</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv" workingdir="bahmni-offline/android">
                <arg>platforms/android/build/outputs/apk/android-release.apk</arg>
                <arg>Bahmni.apk</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>android</resource>
            </resources>
            <artifacts>
              <artifact src="bahmni-offline/android/Bahmni.apk" />
              <artifact src="bahmni.tar.gz" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="deploy" fetchMaterials="false">
        <jobs>
          <job name="deploy">
            <tasks>
              <exec command="sudo">
                <arg>yum</arg>
                <arg>remove</arg>
                <arg>-y</arg>
                <arg>bahmni-web</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>yum</arg>
                <arg>install</arg>
                <arg>-y</arg>
                <arg>bahmni-web-#{rpm_version}</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>yum</arg>
                <arg>remove</arg>
                <arg>-y</arg>
                <arg>bahmni-emr</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>yum</arg>
                <arg>install</arg>
                <arg>-y</arg>
                <arg>bahmni-emr-#{rpm_version}</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>yum</arg>
                <arg>remove</arg>
                <arg>-y</arg>
                <arg>bahmni-event-log-service</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>yum</arg>
                <arg>install</arg>
                <arg>-y</arg>
                <arg>bahmni-event-log-service-#{rpm_version}</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>service</arg>
                <arg>openmrs</arg>
                <arg>restart</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>service</arg>
                <arg>bahmni-event-log-service</arg>
                <arg>restart</arg>
                <runif status="passed" />
              </exec>
              <exec command="sudo">
                <arg>ln</arg>
                <arg>-s</arg>
                <arg>/opt/bdshr-config</arg>
                <arg>/var/www/bahmni_config</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>OFFLINE_EMRFT_SERVER</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="RunTests">
        <environmentvariables>
          <variable name="ADB_INSTALL_TIMEOUT">
            <value>8</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="integrationTests">
            <environmentvariables>
              <variable name="ANDROID_HOME">
                <value>/var/go/android-sdk-linux/</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="./gradlew" workingdir="bahmni-offline/android/platforms/android/">
                <arg>clean</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew" workingdir="bahmni-offline/android/platforms/android">
                <arg>clean</arg>
                <arg>connectedAndroidTest</arg>
                <arg>--debug</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>android</resource>
            </resources>
          </job>
          <job name="functionalTests">
            <environmentvariables>
              <variable name="TEST_ENV">
                <value>offline-ci</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="sleep">
                <arg>900</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>deployables</arg>
                <runif status="passed" />
              </exec>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>emr-functional-tests/screenshots</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>emr-functional-tests/screenshots</arg>
                <runif status="passed" />
              </exec>
              <fetchartifact pipeline="Bahmni_Offline_#{pipeline_name}" stage="Build" job="build" srcfile="bahmni.tar.gz" dest="deployables">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>/tmp/bahmni-offline</arg>
                <runif status="passed" />
              </exec>
              <exec command="tar">
                <arg>-xvzf</arg>
                <arg>deployables/bahmni.tar.gz</arg>
                <arg>-C</arg>
                <arg>/tmp/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="emr-functional-tests">
                <arg>--login</arg>
                <arg>-c</arg>
                <arg>scripts/run.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>OFFLINE_EMRFT</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Build_bacteriology">
      <stage name="defaultStage" cleanWorkingDir="true">
        <jobs>
          <job name="Build">
            <tasks>
              <exec command="mvn" workingdir="bacteriology">
                <arg>clean</arg>
                <arg>deploy</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="java_utils">
      <stage name="buildStage">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="/home/jss/apache-maven-3.0.5/bin/mvn">
                <arg>clean</arg>
                <arg>deploy</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Build_Idgen_Webservices">
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="mvn">
                <arg>clean</arg>
                <arg>deploy</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Rules_Engine">
      <stage name="build-deploy">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="mvn" workingdir="openmrs-module-rulesengine">
                <arg>clean</arg>
                <arg>deploy</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>MVN</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Ansible_Deploy">
      <stage name="defaultStage" cleanWorkingDir="true">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <environmentvariables>
              <variable name="ANSIBLE_HOST_KEY_CHECKING">
                <value>False</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="Bahmni_artifacts_#{release_version}" stage="PackageInstaller" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash" workingdir="bahmni-tw-playbooks">
                <arg>-c</arg>
                <arg>ansible-playbook -i inventories/go-agent deploy.yml --extra-vars="environment_name=#{env_name} implementation_name=#{implementation_name} installer_location=#{installer_location} config_url=#{config_url} base_path=#{base_path} two_factor_auth=#{two_factor_auth} run_playbook_tests=#{run_playbook_tests} implementer_interface=#{implementer_interface}"</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>ANSIBLE_INSTALL</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Nagios_Deploy">
      <stage name="defaultStage">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob">
            <environmentvariables>
              <variable name="ANSIBLE_HOST_KEY_CHECKING">
                <value>False</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="Bahmni_artifacts_#{release_version}" stage="PackageInstaller" job="package-rpm" srcdir="rpms">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>ansible-playbook -i bahmni-tw-playbooks/nagios-deploy bahmni-tw-playbooks/nagios-deploy.yml -vvvv --extra-vars="environment_name=#{env_name} installer_location=#{installer_location} base_path=#{base_path}"</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>ANSIBLE_INSTALL</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Build_Bahmni_Offline_Sync">
      <stage name="defaultStage">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="mvn">
                <arg>clean</arg>
                <arg>install</arg>
                <arg>-U</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="omod/target/bahmniOfflineSync-1.0-SNAPSHOT.omod" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="Publish">
        <jobs>
          <job name="publish-artifacts-to-yum-repo">
            <tasks>
              <fetchartifact pipeline="Build_Bahmni_Offline_Sync" stage="defaultStage" job="build" srcfile="bahmniOfflineSync-1.0-SNAPSHOT.omod">
                <runif status="passed" />
              </fetchartifact>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>yes | sudo cp -f bahmniOfflineSync-1.0-SNAPSHOT.omod /var/www/omod/</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>yum-repo</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="OpenMRS">
      <stage name="buildRPM" cleanWorkingDir="true">
        <jobs>
          <job name="buildRPM">
            <tasks>
              <exec command="gunzip">
                <arg>emr-functional-tests/dbdump/openmrs_backup.sql.gz</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv">
                <arg>emr-functional-tests/dbdump/openmrs_backup.sql</arg>
                <arg>bahmni-package/openmrs/resources/openmrs_demo_dump.sql</arg>
                <runif status="passed" />
              </exec>
              <exec command="./gradlew" workingdir="bahmni-package">
                <arg>-PbahmniRelease=#{rpm_version}</arg>
                <arg>clean</arg>
                <arg>:openmrs:buildRpm</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="bahmni-package/openmrs/build/distributions/bahmni-openmrs-*.rpm" dest="rpms" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </templates>
  <environments>
    <environment name="QA">
      <environmentvariables>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_implementation_name">
          <value>default</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>jss</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_bacteriology">
          <value>true</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="96f384a7-ad80-4859-8b83-7eca4d929e52" />
      </agents>
    </environment>
    <environment name="Demo">
      <environmentvariables>
        <variable name="branch">
          <value>release-0.75</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_implementation_name">
          <value>default</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>jss</value>
        </variable>
      </environmentvariables>
      <pipelines>
        <pipeline name="Bahmni_All_Deploy_Demo_temp" />
        <pipeline name="Clear_Cache_Demo" />
        <pipeline name="Create_Anonymised_Data_Dump" />
        <pipeline name="Database_Backup_Demo" />
        <pipeline name="Deploy_Anonymized_Data" />
        <pipeline name="Deploy_Demo_All" />
        <pipeline name="Reports_Deploy_Demo" />
      </pipelines>
    </environment>
    <environment name="NEPAL">
      <environmentvariables>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>false</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>jss</value>
        </variable>
        <variable name="FACTER_implementation_name">
          <value>jss</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="6f8ef167-f5fa-4bd9-9c3e-0a6506739e14" />
      </agents>
      <pipelines>
        <pipeline name="Bahmni_All_Deploy_Nepal" />
        <pipeline name="Config_Deploy_Nepal" />
      </pipelines>
    </environment>
    <environment name="Dot6">
      <environmentvariables>
        <variable name="branch">
          <value>release-0.77</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_implementation_name">
          <value>jss</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>jss</value>
        </variable>
        <variable name="pipeline_name">
          <value>Released</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="1bf36569-4af5-4c3c-bec8-5f3a8399c54f" />
      </agents>
      <pipelines>
        <pipeline name="Anonymise_Dot6" />
      </pipelines>
    </environment>
    <environment name="Build_default_config_Released" />
    <environment name="Dot27">
      <environmentvariables>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_implementation_name">
          <value>default</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>bahmni</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="4545638b-0364-4fd2-b31a-0ffd3b51df6b" />
      </agents>
    </environment>
    <environment name="SOAK">
      <environmentvariables>
        <variable name="TEST_ENV">
          <value>soak</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>bahmni</value>
        </variable>
        <variable name="FACTER_bahmni_nagios_machine_type">
          <value>client</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="FACTER_implementation_name">
          <value>default</value>
        </variable>
        <variable name="FACTER_bahmni_nagios_server_ip">
          <value>172.18.2.47</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="b4631760-202f-45de-ae64-d197ab2bd612" />
      </agents>
      <pipelines>
        <pipeline name="Bahmni_All_Deploy_Soaktest" />
        <pipeline name="Run_Functional_Tests_Soak" />
      </pipelines>
    </environment>
    <environment name="EndTB" />
    <environment name="0.80">
      <environmentvariables>
        <variable name="branch">
          <value>master</value>
        </variable>
        <variable name="implementation_name">
          <value>default</value>
        </variable>
        <variable name="pipeline_name">
          <value>0.80</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>bahmni</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value />
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_implementation_name">
          <value />
        </variable>
        <variable name="FACTER_bahmni_active_machine_ip">
          <value>127.0.0.1</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_appointments">
          <value />
        </variable>
        <variable name="bahmni_version">
          <value>0.80-SNAPSHOT</value>
        </variable>
      </environmentvariables>
    </environment>
    <environment name="Dot29">
      <environmentvariables>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_implementation_name">
          <value>default</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>bahmni</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_bacteriology">
          <value>true</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="63c5ba84-2d23-4925-9b7a-e893a6b19f32" />
      </agents>
    </environment>
    <environment name="Dot34">
      <environmentvariables>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="FACTER_implementation_name">
          <value>default</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>bahmni</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_bacteriology">
          <value>true</value>
        </variable>
      </environmentvariables>
      <pipelines>
        <pipeline name="Bahmni_All_Deploy_34" />
      </pipelines>
    </environment>
    <environment name="GoServer">
      <agents>
        <physical uuid="26819600-4eef-46ff-8198-f6b869e45509" />
      </agents>
      <pipelines>
        <pipeline name="cleanup-go-server" />
      </pipelines>
    </environment>
    <environment name="Bahmni_Certs" />
    <environment name="Dot42">
      <environmentvariables>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_implementation_name">
          <value>default</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>bahmni</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="d5ec2bc1-959d-42dd-8de0-f249bd3e070c" />
      </agents>
    </environment>
    <environment name="Demo_Backup">
      <environmentvariables>
        <variable name="branch">
          <value>release-0.75</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_implementation_name">
          <value>default</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>jss</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="b28f2f9e-8d68-481a-879e-3920de0cb566" />
        <physical uuid="1a70e0f8-6a7a-4f6f-96f8-1319ce471f8b" />
      </agents>
      <pipelines>
        <pipeline name="Bahmni_All_Deploy_Demo_temp_Backup" />
        <pipeline name="Clear_Cache_Demo_backup" />
        <pipeline name="Create_Anonymised_Data_Dump_backup" />
        <pipeline name="Database_Backup_Demo_backup" />
        <pipeline name="Deploy_Anonymized_Data_backup" />
      </pipelines>
    </environment>
    <environment name="Offline">
      <agents>
        <physical uuid="8ed6aef4-ff91-419b-94e0-5ecf7f4f9bad" />
        <physical uuid="b8d0afca-38b4-4607-9447-0d50a68d7287" />
        <physical uuid="1e99cd28-f9ee-480c-a724-f249d55351f7" />
      </agents>
      <pipelines>
        <pipeline name="Bahmni_Offline_v0_82" />
        <pipeline name="Bahmni_Offline_v0_83" />
        <pipeline name="Bahmni_Offline_v0_84" />
      </pipelines>
    </environment>
    <environment name="Dot46">
      <environmentvariables>
        <variable name="FACTER_deploy_bahmni_openerp">
          <value>true</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_openelis">
          <value>true</value>
        </variable>
        <variable name="FACTER_implementation_name">
          <value>default</value>
        </variable>
        <variable name="FACTER_bahmni_user_name">
          <value>bahmni</value>
        </variable>
        <variable name="FACTER_deploy_bahmni_bacteriology">
          <value>true</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="5d5127d8-5f48-4146-8d05-17799fae96c0" />
      </agents>
    </environment>
  </environments>
  <agents>
    <agent hostname="jss-misc04.thoughtworks.com" ipaddress="172.18.2.6" uuid="1bf36569-4af5-4c3c-bec8-5f3a8399c54f" />
    <agent hostname="jss-misc05.thoughtworks.com" ipaddress="172.18.2.17" uuid="f9bb24d1-6635-4ede-aedf-ba2e4dcf138e">
      <resources>
        <resource>UI</resource>
        <resource>ANSIBLE</resource>
      </resources>
    </agent>
    <agent hostname="jss-misc.thoughtworks.com" ipaddress="172.18.2.8" uuid="a4eeb222-0b17-46a8-9ba9-f103f5aaaf71">
      <resources>
        <resource>MVN</resource>
        <resource>OPENERP</resource>
        <resource>ANSIBLE_INSTALL</resource>
        <resource>transifex</resource>
      </resources>
    </agent>
    <agent hostname="jssvm01.thoughtworks.com" ipaddress="172.18.2.13" uuid="6f8ef167-f5fa-4bd9-9c3e-0a6506739e14" />
    <agent hostname="jssvm2.thoughtworks.com" ipaddress="172.18.2.14" uuid="54a579bd-67cf-40d4-959e-0c407945bcad">
      <resources>
        <resource>dropbox</resource>
        <resource>yum-repo</resource>
        <resource>ANSIBLE</resource>
      </resources>
    </agent>
    <agent hostname="jss-misc06.thoughtworks.com" ipaddress="172.18.2.18" uuid="c144e289-510a-4157-bba3-367000814dda">
      <resources>
        <resource>ANSIBLE_INSTALL</resource>
        <resource>ANSIBLE_EMRFT</resource>
      </resources>
    </agent>
    <agent hostname="unknown-host-786" ipaddress="172.18.2.27" uuid="4545638b-0364-4fd2-b31a-0ffd3b51df6b" />
    <agent hostname="unknown-host-502" ipaddress="172.18.2.43" uuid="b4631760-202f-45de-ae64-d197ab2bd612">
      <resources>
        <resource>SOAK</resource>
      </resources>
    </agent>
    <agent hostname="unknown-host-629" ipaddress="172.18.2.28" uuid="aff3d776-c9bd-493b-8b70-f83716d39b26">
      <resources>
        <resource>EMRFT</resource>
        <resource>MVN</resource>
        <resource>ANSIBLE</resource>
        <resource>reports</resource>
      </resources>
    </agent>
    <agent hostname="qa-bahmni.thoughtworks.com" ipaddress="172.18.2.10" uuid="96f384a7-ad80-4859-8b83-7eca4d929e52" />
    <agent hostname="qa-bahmni-clone02.thoughtworks.com" ipaddress="172.18.2.29" uuid="63c5ba84-2d23-4925-9b7a-e893a6b19f32" />
    <agent hostname="unknown-host-372" ipaddress="172.18.2.32" uuid="6b3b2386-4520-4d56-aa7c-5cd19df45aca">
      <resources>
        <resource>ANSIBLE</resource>
      </resources>
    </agent>
    <agent hostname="search-bahmni.thoughtworks.com" ipaddress="172.18.2.20" uuid="ac592a32-ed2d-4b7e-aef9-46d723c6efd4" isDisabled="true">
      <resources>
        <resource>MVN</resource>
      </resources>
    </agent>
    <agent hostname="ci-bahmni.thoughtworks.com" ipaddress="172.18.2.11" uuid="26819600-4eef-46ff-8198-f6b869e45509" />
    <agent hostname="unknown-host-627" ipaddress="172.18.2.37" uuid="b397d82e-d0c4-427c-8f81-49084ecf2379" isDisabled="true">
      <resources>
        <resource>certs</resource>
      </resources>
    </agent>
    <agent hostname="unknown-host-314" ipaddress="172.18.2.42" uuid="d5ec2bc1-959d-42dd-8de0-f249bd3e070c" />
    <agent hostname="Bahmni-138745" ipaddress="172.18.2.53" uuid="8ed6aef4-ff91-419b-94e0-5ecf7f4f9bad">
      <resources>
        <resource>OFFLINE_EMRFT</resource>
      </resources>
    </agent>
    <agent hostname="unknown-host-316" ipaddress="172.18.2.44" uuid="b8d0afca-38b4-4607-9447-0d50a68d7287">
      <resources>
        <resource>OFFLINE_EMRFT_SERVER</resource>
      </resources>
    </agent>
    <agent hostname="demo-bahmni.thoughtworks.com" ipaddress="172.18.2.12" uuid="b28f2f9e-8d68-481a-879e-3920de0cb566" />
    <agent hostname="bahmni-demo2.thoughtworks.com" ipaddress="172.18.2.36" uuid="1a70e0f8-6a7a-4f6f-96f8-1319ce471f8b" />
    <agent hostname="jss-fun-test.thoughtworks.com" ipaddress="172.18.2.25" uuid="a66e9393-6f56-411a-9a01-b7b67b0a37a4" isDisabled="true">
      <resources>
        <resource>ANSIBLE</resource>
        <resource>UI</resource>
      </resources>
    </agent>
    <agent hostname="unknown-host-455" ipaddress="172.18.2.46" uuid="5d5127d8-5f48-4146-8d05-17799fae96c0" />
    <agent hostname="methlab" ipaddress="10.136.23.30" uuid="1e99cd28-f9ee-480c-a724-f249d55351f7">
      <resources>
        <resource>android</resource>
      </resources>
    </agent>
  </agents>
</cruise>